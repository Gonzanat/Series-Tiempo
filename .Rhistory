runApp('R')
library(PracSeriesTiempo)
runApp('R')
library(PracSeriesTiempo)
runApp('R')
library(PracSeriesTiempo)
runApp('R')
runApp()
library(PracSeriesTiempo)
runApp()
library(PracSeriesTiempo)
runApp()
library(PracSeriesTiempo)
runApp()
runApp()
library(PracSeriesTiempo)
runApp()
library(PracSeriesTiempo)
runApp()
library(PracSeriesTiempo)
runApp()
library(PracSeriesTiempo)
runApp()
library(PracSeriesTiempo)
runApp()
library(PracSeriesTiempo)
runApp()
library(PracSeriesTiempo)
runApp()
library(PracSeriesTiempo)
runApp()
library(PracSeriesTiempo)
runApp()
library(PracSeriesTiempo)
runApp()
library(PracSeriesTiempo)
runApp()
runApp()
library(PracSeriesTiempo)
runApp()
runApp()
library(PracSeriesTiempo)
runApp()
library(PracSeriesTiempo)
runApp()
library(PracSeriesTiempo)
runApp()
library(PracSeriesTiempo)
runApp()
runApp()
library(PracSeriesTiempo)
runApp()
gas = scan('http://www.uam.es/joser.berrendero/datos/gas6677.dat')
head(gas)
gas
length(gas)
gas = scan('http://www.uam.es/joser.berrendero/datos/gas6677.dat')
plot(gas)
freq=12 #mes
start_year=1966,
period=1
gas.ts=ts(data = gas, start=c(strat_year,period), frequency = freq)
gas.ts=ts(data = gas, start=c(start_year,period), frequency = freq)
#3. Tratar los datos como una serie de tiempo.
freq=12 #mes
start_year=1966,
period=1
gas.ts=ts(data = gas, start=c(start_year,period), frequency = freq)
length(gas)
gas.ts=ts(data = gas, start=c(start_year,period), frequency = freq)
started <- c(start_year, period)
freq<-12 #mes
start_year<-1966
gas.ts=ts(data = gas, start=c(start_year,period), frequency = freq)
gas.ts
freq<-12 #mes
start_year<-1966
period=2
gas.ts=ts(data = gas, start=c(start_year,period), frequency = freq)
gas.ts
print(gas.ts)
plot(gas.ts)
#3. Tratar los datos como una serie de tiempo.
freq<-12          ##Define frequencia de los datos
start_year<-1966  ##Define año de inicio
period=1          ##Define periodo de inicio.
#3. Definir la Serie con base a los parámetros indicados por el usuario.
gas.ts=ts(data = gas, start=c(start_year,period), frequency = freq)
#3. Imprimir los datos de la serie
print(gas.ts)
#4. Pintar la serie
plot(gas.ts)
boxplot(gast.ts~cycle(gas.ts))
boxplot(gas.ts~cycle(gas.ts))
boxplot(gas.ts~ cycle(gas.ts))
freq<-4         ##Define frequencia de los datos
start_year<-1966  ##Define año de inicio
period=1          ##Define periodo de inicio.
#3. Definir la Serie con base a los parámetros indicados por el usuario.
gas.ts=ts(data = gas, start=c(start_year,period), frequency = freq)
#3. Imprimir los datos de la serie
print(gas.ts)
#4. Comparar el consumo de gasolina para para periodo
boxplot(gas.ts~ cycle(gas.ts))
#4. Pintar la serie
plot(gas.ts)
boxplot(gas.ts~ cycle(gas.ts))
cycle(gas.ts)
freq<-12         ##Define frequencia de los datos
start_year<-1966  ##Define año de inicio
period=1          ##Define periodo de inicio.
#3. Definir la Serie con base a los parámetros indicados por el usuario.
gas.ts=ts(data = gas, start=c(start_year,period), frequency = freq)
#3. Imprimir los datos de la serie
print(gas.ts)
#4. Pintar la serie
plot(gas.ts)
#5. Comparar el consumo de gasolina para para periodo
boxplot(gas.ts~ cycle(gas.ts))
#6. Determinar la unidad de tiempo a la que pertenece cada observación de la serie:
##El comando "cycle" determina la unidad de tiempo a la que pertene cada observación de la serie.
cycle(gas.ts)
gas.ts.desc=decompose(gas.ts)
gas.ts.desc=decompose(gas.ts)
plot(gas.ts.desc, xlab='Año')
plot(gas.ts.desc$figure, xlab='Año')
line(gas.ts.desc$seasonal, xlab='Año')
line(gas.ts.desc$seasonal)
plot(gas.ts.desc$figure, xlab='Año')
lines(gas.ts.desc$seasonal)
lines(gas.ts.desc$seasonal)
plot(gas.ts.desc$seasonal, xlab='Año')
plot(gas.ts.desc$trend, xlab='Año')
plot(gas.ts.desc$figure, xlab='Año')
lines(gas.ts.desc$seasonal, xlab='Año')
lines(gas.ts.desc$seasonal, xlab='Año')
plot(gas.ts.desc$figure, xlab='Año')
plot(gas.ts.desc$seasonal, xlab='Año')
lines(gas.ts.desc$seasonal, xlab='Año')
plot(gas.ts.desc, xlab='Año')
plot(gas.ts.desc$random, xlab='Año')
gas.ts.desc=decompose(gas.ts, type = c("additive", "multiplicative"), )
plot(gas.ts.desc, xlab='Año')
plot(gas.ts.desc$figure, xlab='Año')
plot(gas.ts.desc$seasonal, xlab='Año')
plot(gas.ts.desc$trend, xlab='Año')
plot(gas.ts.desc$random, xlab='Año')
gas.ts.desc=decompose(gas.ts, type = c("additive", "multiplicative") )
plot(gas.ts.desc, xlab='Año')
gas.ts.desc=decompose(gas.ts )
plot(gas.ts.desc, xlab='Año')
plot(gas.ts.desc$seasonal, xlab='Año')
library(PracSeriesTiempo)
shiny::runApp('R')
library(boot)
library(shiny)
library(e1071)
library(corrplot)
runApp('R')
runApp('R')
library(PracSeriesTiempo)
runApp('R')
library(PracSeriesTiempo)
runApp('R')
library(PracSeriesTiempo)
runApp('R')
library(PracSeriesTiempo)
runApp('R')
library(PracSeriesTiempo)
runApp('R')
Playing_with_your_data()
Playing_with_your_data()
library(PracSeriesTiempo)
library(shiny)
library(boot)
library(shiny)
library(e1071)
library(corrplot)
gas = scan('http://www.uam.es/joser.berrendero/datos/gas6677.dat')
library(PracSeriesTiempo)
runApp('R')
library(PracSeriesTiempo)
library(PracSeriesTiempo)
library(PracSeriesTiempo)
library(PracSeriesTiempo)
library(PracSeriesTiempo)
library(shiny)
library(e1071)
runApp('R')
library(PracSeriesTiempo)
runApp('R')
runApp()
library(PracSeriesTiempo)
runApp()
df_arima= ts(AirPassengers, frequency=12, start = (1940, 1), end=c(1958,12))
df_arima= ts(AirPassengers, frequency=12, start = c(1940, 1), end=c(1958,12))
df_arima
forecast::auto.arima(df_arima)
library(forecast)
install.packages(forecast)
install.packages("forecast")
forecast::auto.arima(df_arima)
head(AirPassengers)
AirPassengers
df_arima
##Los datos de AIRPASA... van desde el años 1949 a 1960
df_arima= ts(AirPassengers, frequency=12, start = c(1949, 1), end=c(1958,12))
df_arima
df_arima
AirPassengers
forecast::auto.arima(df_arima)
forecast::forecast(forecast::auto.arima(df_arima), h=24)
##forecast::auto.arima(df_arima)
##Predicción de los 24 meses siguientes.
forecast::forecast(forecast::auto.arima(df_arima), h=1)
forecast::forecast(forecast::auto.arima(df_arima), h=12)
AirPassengers
ts(AirPassengers, frequency=12, start = c(1949, 1))
ts(AirPassengers, frequency=4, start = c(1949, 1))
ts(AirPassengers, frequency=2, start = c(1949, 1))
ts(AirPassengers, frequency=12, start = c(1949, 1))
forecast::forecast(forecast::auto.arima(df_arima), h=12)
plot(forecast)
plot(forecast)
forecast::forecast(forecast::auto.arima(df_arima), h=12)
plot(forecast)
forecast
forecast
forecast=forecast(forecast::auto.arima(df_arima), h=12)
forecasts=forecast(forecast::auto.arima(df_arima), h=12)
forecast(forecast::auto.arima(df_arima), h=12)
forecast::forecast(forecast::auto.arima(df_arima), h=12)
a<-forecast::forecast(forecast::auto.arima(df_arima), h=12)
plot(a)
bería volverse a recrear, pero indicando el parámetro end
prediction<-forecast::forecast(forecast::auto.arima(df_arima), h=12)
prediction<-forecast::forecast(forecast::auto.arima(df_arima), h=12)
plot(prediction)
prediction<-forecast::forecast(forecast::auto.arima(df_arima), h=24)
plot(prediction)
prediction<-forecast::forecast(forecast::auto.arima(df_arima), h=12)
plot(prediction)
prediction<-forecast::forecast(forecast::auto.arima(df_arima), h=1)
plot(prediction)
prediction<-forecast::forecast(forecast::auto.arima(df_arima), h=36)
plot(prediction)
df_arima= ts(AirPassengers, frequency=12, start = c(1949, 1), end=c(1960,12))
df_arima
prediction<-forecast::forecast(forecast::auto.arima(df_arima), h=36)
plot(prediction)
df_arima= ts(AirPassengers, frequency=12, start = c(1949, 1), end=c(1958,12))
df_arima
##Predicción con modelo ARIMA y FORECAST:
##forecast::auto.arima(df_arima)
##Predicción de los 24 meses siguientes.
##Al momento de hacer la predicción, se debe solicitar al usuario cuántos periodos quiere predecir,
##en este caso, pedirle el parámetro "END".
##y la serie debería volverse a recrear, pero indicando el parámetro end
prediction<-forecast::forecast(forecast::auto.arima(df_arima), h=24)
plot(prediction)
lines(df_arima)
plot(prediction)
lines(df_arima)
plot(prediction)
line(df_arima)
plot(prediction)
lines(df_arima, t='l')
plot(prediction)
lines(df_arima, t='l')
lines(df_arima, t='l')
plot(df_arima)
plot(prediction)
lines(df_arima, t='l')
plot(df_arima)
lines(df_arima, t='l')
plot(prediction)
prediction<-forecast::forecast(forecast::auto.arima(df_arima, include.drift = T), h=24)
plot(prediction)
prediction<-forecast::forecast(forecast::auto.arima(df_arima, include.drift = T), h=24)
prediction<-forecast::forecast(forecast::auto.arima(df_arima, drift = T), h=24)
prediction<-forecast::forecast(forecast::auto.arima(df_arima), h=24)
plot(prediction)
prediction<-forecast::forecast(forecast::auto.arima(df_arima), h=60)
plot(prediction)
prediction<-forecast::forecast(forecast::auto.arima(df_arima), h=72)
plot(prediction)
fit = arima(log(AirPassengers), c(0, 1, 1), seasonal = list(order = c(0, 1, 1), period = 12))
pred <- predict(fit, n.ahead = 10*12)
ts.plot(AirPassengers,exp(pred$pred), log = "y", lty = c(1,3))
fit = arima(AirPassengers, c(0, 1, 1), seasonal = list(order = c(0, 1, 1), period = 12))
pred <- predict(fit, n.ahead = 10*12)
ts.plot(AirPassengers,exp(pred$pred), log = "y", lty = c(1,3))
prediction<-forecast::forecast(forecast::auto.arima(log(df_arima), h=72))
plot(prediction)
fit = arima(log(AirPassengers), c(0, 1, 1), seasonal = list(order = c(0, 1, 1), period = 12))
pred <- predict(fit, n.ahead = 10*12)
ts.plot(AirPassengers,exp(pred$pred), lty = c(1,3))
prediction<-forecast::forecast(forecast::auto.arima(log(df_arima), h=72))
plot(prediction)
ts.plot(AirPassengers,exp(pred$pred), log = "y", lty = c(1,3))
plot(prediction)
runApp()
library(PracSeriesTiempo)
library(boot)
library(shiny)
library(e1071)
library(corrplot)
library(forecast)
##Los datos de AIRPASA... van desde el años 1949 a 1960
##Entonces pongo como fin 1958, para predecir los últimos 2 años.
##La frequencia se asigna con base a como estén organizados los datos de la serie de tiempos:
##Si son mensuales (12), por quarter (4), Semestrales(2)
df_arima= ts(AirPassengers, frequency=12, start = c(1949, 1), end=c(1958,12))
df_arima
##Predicción con modelo ARIMA y FORECAST:
##forecast::auto.arima(df_arima)
##Predicción de los 24 meses siguientes.
##Al momento de hacer la predicción, se debe solicitar al usuario cuántos periodos quiere predecir,
##en este caso, pedirle el parámetro "END".
##y la serie debería volverse a recrear, pero indicando el parámetro end
prediction<-forecast::forecast(forecast::auto.arima(log(df_arima), h=72))
plot(prediction)
df_arima= ts(log(AirPassengers), frequency=12, start = c(1949, 1), end=c(1958,12))
df_arima
plot(df_arima)
##y la serie debería volverse a recrear, pero indicando el parámetro end
prediction<-forecast::forecast(forecast::auto.arima((df_arima), h=72))
plot(prediction)
library(forecast)
##Los datos de AIRPASA... van desde el años 1949 a 1960
##Entonces pongo como fin 1958, para predecir los últimos 2 años.
##La frequencia se asigna con base a como estén organizados los datos de la serie de tiempos:
##Si son mensuales (12), por quarter (4), Semestrales(2)
df_arima= ts(AirPassengers, frequency=12, start = c(1949, 1), end=c(1958,12))
df_arima
plot(df_arima)
##Predicción con modelo ARIMA y FORECAST:
##forecast::auto.arima(df_arima)
##Predicción de los 24 meses siguientes.
##Al momento de hacer la predicción, se debe solicitar al usuario cuántos periodos quiere predecir,
##en este caso, pedirle el parámetro "END".
##y la serie debería volverse a recrear, pero indicando el parámetro end
prediction<-forecast::forecast(forecast::auto.arima((df_arima), h=72))
plot(prediction)
##Otro ejemplo:
fit = arima(log(AirPassengers), c(0, 1, 1), seasonal = list(order = c(0, 1, 1), period = 12))
pred <- predict(fit, n.ahead = 10*12)
ts.plot(AirPassengers,exp(pred$pred), log = "y", lty = c(1,3))
prediction<-forecast::forecast(forecast::auto.arima(log(df_arima), h=72))
library(forecast)
##Los datos de AIRPASA... van desde el años 1949 a 1960
##Entonces pongo como fin 1958, para predecir los últimos 2 años.
##La frequencia se asigna con base a como estén organizados los datos de la serie de tiempos:
##Si son mensuales (12), por quarter (4), Semestrales(2)
df_arima= ts(AirPassengers, frequency=12, start = c(1949, 1), end=c(1958,12))
df_arima
##Predicción con modelo ARIMA y FORECAST:
##forecast::auto.arima(df_arima)
##Predicción de los 24 meses siguientes.
##Al momento de hacer la predicción, se debe solicitar al usuario cuántos periodos quiere predecir,
##en este caso, pedirle el parámetro "END".
##y la serie debería volverse a recrear, pero indicando el parámetro end
prediction<-forecast::forecast(forecast::auto.arima(log(df_arima), h=72))
plot(prediction)
fit = arima(log(AirPassengers), c(0, 1, 1), seasonal = list(order = c(0, 1, 1), period = 12))
pred <- predict(fit, n.ahead = 10*12)
ts.plot(AirPassengers,exp(pred$pred), log = "y", lty = c(1,3))
plot(AirPassengers)
T=100
y= rep(0, T)
a=13.9
b=0.11
s<-c(0.78, 1.63, -0.73, -1.53)
P<-4
sigma<-0.5
for(h in 1:T){
y[h]<-a + b * h   + s[h %% P +1]
}
plot(y, type='l')
y
cat(y, sep="\n")
fn<-function(param){
T <-100
a <-rep(0,T)
b <-rep(0,T)
s <-rep(0,T)
p <-rep(0,T)
s2<-rep(0,T)
alpha<-param[1]
beta<-param[2]
gamma<-param[3]
a[4]<- param[4]
a[4]<- param[5]
s[1]<- param[6]
s[2]<- param[7]
s[3]<- param[8]
s[4]<- param[9]
P[5]<-a[4] + b[4]+s[4]
e[5]<-y[5] - p[5]
e2[5]< e[5]^2
for(t in 5:T){
a[t]=alpha*(y[t]-s[t-4]) + (1-alpha)* (a[t-1] + b[t-1])
b[t]=beta*(a[t]-a[t-1]) + (1-beta) * b[t-1]
s[t]=gamma *(y[t]-a[t]) + (1-gamma) * (s[t-4])
p[t] <-a[t-1] + b[t-1] + s[t-1]
e[t] <- Y[t] - p[t]
e2[t] <- e[t]^2
}
sse<- sum(e2[5:T])
return (sse)
}
print(fn(param=rep(1,9)))
fn<-function(param){
T <-100
a <-rep(0,T)
b <-rep(0,T)
s <-rep(0,T)
p <-rep(0,T)
e <-rep(0,T)
s2<-rep(0,T)
alpha<-param[1]
beta<-param[2]
gamma<-param[3]
a[4]<- param[4]
a[4]<- param[5]
s[1]<- param[6]
s[2]<- param[7]
s[3]<- param[8]
s[4]<- param[9]
P[5]<-a[4] + b[4]+s[4]
e[5]<-y[5] - p[5]
e2[5]< e[5]^2
for(t in 5:T){
a[t]=alpha*(y[t]-s[t-4]) + (1-alpha)* (a[t-1] + b[t-1])
b[t]=beta*(a[t]-a[t-1]) + (1-beta) * b[t-1]
s[t]=gamma *(y[t]-a[t]) + (1-gamma) * (s[t-4])
p[t] <-a[t-1] + b[t-1] + s[t-1]
e[t] <- Y[t] - p[t]
e2[t] <- e[t]^2
}
sse<- sum(e2[5:T])
return (sse)
}
print(fn(param=rep(1,9)))
fn<-function(param){
T <-100
a <-rep(0,T)
b <-rep(0,T)
s <-rep(0,T)
p <-rep(0,T)
e <-rep(0,T)
s2<-rep(0,T)
e2<-rep(0,T)
alpha<-param[1]
beta<-param[2]
gamma<-param[3]
a[4]<- param[4]
a[4]<- param[5]
s[1]<- param[6]
s[2]<- param[7]
s[3]<- param[8]
s[4]<- param[9]
P[5]<-a[4] + b[4]+s[4]
e[5]<-y[5] - p[5]
e2[5]< e[5]^2
for(t in 5:T){
a[t]=alpha*(y[t]-s[t-4]) + (1-alpha)* (a[t-1] + b[t-1])
b[t]=beta*(a[t]-a[t-1]) + (1-beta) * b[t-1]
s[t]=gamma *(y[t]-a[t]) + (1-gamma) * (s[t-4])
p[t] <-a[t-1] + b[t-1] + s[t-1]
e[t] <- Y[t] - p[t]
e2[t] <- e[t]^2
}
sse<- sum(e2[5:T])
return (sse)
}
print(fn(param=rep(1,9)))
fn<-function(param){
T <-100
a <-rep(0,T)
b <-rep(0,T)
s <-rep(0,T)
p <-rep(0,T)
e <-rep(0,T)
s2<-rep(0,T)
e2<-rep(0,T)
alpha<-param[1]
beta<-param[2]
gamma<-param[3]
a[4]<- param[4]
a[4]<- param[5]
s[1]<- param[6]
s[2]<- param[7]
s[3]<- param[8]
s[4]<- param[9]
P[5]<-a[4] + b[4]+s[4]
e[5]<-y[5] - p[5]
e2[5]< e[5]^2
for(t in 5:T){
a[t]=alpha*(y[t]-s[t-4]) + (1-alpha)* (a[t-1] + b[t-1])
b[t]=beta*(a[t]-a[t-1]) + (1-beta) * b[t-1]
s[t]=gamma *(y[t]-a[t]) + (1-gamma) * (s[t-4])
p[t] <-a[t-1] + b[t-1] + s[t-1]
e[t] <- y[t] - p[t]
e2[t] <- e[t]^2
}
sse<- sum(e2[5:T])
return (sse)
}
print(fn(param=rep(1,9)))
print(fn(param=rep(1,9)))
optim(par=rep(2,9), fn=fn)
