##view results
summary(result)
result$t #Para ver lo R valores calculados
rsq<-function(formula, data, indices){
d<-data[indices,] #allow boot to select sample.
##form<-str_replace(paste(formula, '(',d, ')'),'"', '')
form<-paste(formula, '(',d, ')')
fit<- as.formula(form)
print(fit)
##return(summary(fit)$r.square)
}
result<-boot(data=mtcars, statistic=rsq, R=1000, formula='mean')
rsq<-function(formula, data, indices){
d<-data[indices,] #allow boot to select sample.
##form<-str_replace(paste(formula, '(',d, ')'),'"', '')
form<-paste(formula, '(',d, ')')
print(form)
fit<- as.formula(form)
print(fit)
##return(summary(fit)$r.square)
}
##Aplicación de regresión lineal para calcular la variable mgp en función de wt y disp
result<-boot(data=mtcars, statistic=rsq, R=1000, formula='mean')
library(PracSeriesTiempo)
Playing_with_your_data()
Playing_with_your_data
Playing_with_your_data
library(shiny)
library(shiny)
library(e1071)
library(corrplot)
library(shiny)
library(e1071)
library(corrplot)
library(PracSeriesTiempo)
Playing_with_your_data
detach("package:PracSeriesTiempo", unload=TRUE)
library(PracSeriesTiempo)
Playing_with_your_data()
Playing_with_your_data()
library(PracSeriesTiempo)
Playing_with_your_data()
library(corrplot)
library(e1071)
library(shiny)
Playing_with_your_data()
library(PracSeriesTiempo)
Playing_with_your_data()
alcohol<-c(8.99, 7.90, 1.03, 7,86, 10.41, 1.43, 1.92, 0.34, 11.93, 8.14, 3.77, 10.36, 3.11, 0.11, 5, 1.86, 5.52, 4.27, 4.77, 18.22)
plot(alcohol)
hist(alcohol)
alcohol<-c(8.99, 7.90, 1.03, 7.86, 10.41, 1.43, 1.92, 0.34,
11.93, 8.14, 3.77, 10.36, 3.11, 0.11, 5, 1.86,
5.52, 4.27, 4.77, 18.22)
hist(alcohol)
library(boot)
fun_mediana<-function(data, indices){
muestra=data[,indices]
medianan =median(muestra)
return medianan
}
fun_mediana<-function(data, indices){
muestra=data[,indices]
medianan =median(muestra)
return(medianan)
}
call_boots <- boot(data=alcohol,statisticfun_mediana)
summary(alcohol)
call_boots <- boot(data=alcohol,statisticfun_mediana, R=1000)
call_boots <- boot(data=alcohol,statistic=fun_mediana, R=1000)
fun_mediana<-function(data, indices){
muestra=d<-data[indices,]
medianan =median(muestra)
return(medianan)
}
call_boots <- boot(data=alcohol,statistic=fun_mediana, R=1000)
fun_mediana<-function(data, indices){
muestra=d<-data[indices]
medianan =median(muestra)
return(medianan)
}
call_boots <- boot(data=alcohol,statistic=fun_mediana, R=1000)
call_boots$t0
call_boots$t
summary(call_boots$t)
call_boots$t0
summary(call_boots$t)
call_boots$t
summary(call_boots$t)
hist(call_boots$t)
sd(call_boots$t)
sd(call_boots$t)
percentil25% <-quantile(call_boots$t, 0.25)
quantile(call_boots$t, 0.25)
percentil25 <-quantile(call_boots$t, 0.25)
percentil75 <-quantile(call_boots$t, 0.75)
percentil75 <-quantile(call_boots$t, 0.75)
percentil25
percentil75
percentil75 <-quantile(call_boots$t, 0.95)
percentil25
percentil75
percentil25 <-quantile(call_boots$t, 0.25)
percentil75 <-quantile(call_boots$t, 0.97)
percentil25
percentil75
percentil25 <-quantile(call_boots$t, 0.25)
percentil75 <-quantile(call_boots$t, 0.75)
percentil25
percentil75
percentil25 <-percenti(call_boots$t, 0.025)
percentil75 <-quantile(call_boots$t, 0.975)
percentil25 <-percenti(call_boots$t, 0.025)
percentil25 <-quantile(call_boots$t, 0.025)
percentil75 <-quantile(call_boots$t, 0.975)
percentil25
percentil75
boot.ci(call_boots, type="bca")
boot.ci(call_boots, type="basic")
boot.ci(call_boots)
Playing_with_your_data()
Playing_with_your_data()
library(shiny)
library(e1071)
library(shiny)
library(e1071)
library(corrplot)
library(PracSeriesTiempo)
Playing_with_your_data()
library(PracSeriesTiempo)
Playing_with_your_data()
library(PracSeriesTiempo)
Playing_with_your_data()
library(PracSeriesTiempo)
Playing_with_your_data()
library(PracSeriesTiempo)
library(boot)
Playing_with_your_data()
library(PracSeriesTiempo)
library(PracSeriesTiempo)
library(boot)
library(shiny)
library(e1071)
library(corrplot)
Playing_with_your_data()
library(PracSeriesTiempo)
library(PracSeriesTiempo)
library(boot)
library(shiny)
library(e1071)
library(corrplot)
Playing_with_your_data()
library(PracSeriesTiempo)
library(boot)
library(shiny)
library(e1071)
library(corrplot)
Playing_with_your_data()
library(PracSeriesTiempo)
library(boot)
library(shiny)
library(e1071)
library(corrplot)
Playing_with_your_data()
library(PracSeriesTiempo)
library(boot)
library(shiny)
library(e1071)
library(corrplot)
Playing_with_your_data()
library(PracSeriesTiempo)
library(boot)
library(shiny)
library(e1071)
library(corrplot)
Playing_with_your_data()
library(PracSeriesTiempo)
library(boot)
library(shiny)
library(e1071)
library(corrplot)
Playing_with_your_data()
library(PracSeriesTiempo)
library(boot)
library(shiny)
library(e1071)
library(corrplot)
Playing_with_your_data()
library(PracSeriesTiempo)
library(boot)
library(shiny)
library(e1071)
library(corrplot)
Playing_with_your_data()
library(PracSeriesTiempo)
library(boot)
library(shiny)
library(e1071)
library(corrplot)
Playing_with_your_data()
library(PracSeriesTiempo)
library(boot)
library(shiny)
library(e1071)
library(corrplot)
Playing_with_your_data()
library(PracSeriesTiempo)
library(boot)
library(shiny)
library(e1071)
library(corrplot)
Playing_with_your_data()
library(PracSeriesTiempo)
library(PracSeriesTiempo)
library(boot)
library(shiny)
library(e1071)
library(corrplot)
Playing_with_your_data()
library(PracSeriesTiempo)
library(boot)
library(shiny)
library(e1071)
library(corrplot)
Playing_with_your_data()
library(PracSeriesTiempo)
library(boot)
library(shiny)
library(e1071)
library(corrplot)
Playing_with_your_data()
library(PracSeriesTiempo)
library(boot)
library(shiny)
library(e1071)
library(corrplot)
Playing_with_your_data()
library(PracSeriesTiempo)
library(boot)
library(shiny)
library(e1071)
library(corrplot)
Playing_with_your_data()
library(PracSeriesTiempo)
library(boot)
library(shiny)
library(e1071)
library(corrplot)
Playing_with_your_data()
library(PracSeriesTiempo)
library(boot)
library(shiny)
library(e1071)
library(corrplot)
Playing_with_your_data()
library(PracSeriesTiempo)
library(boot)
library(shiny)
library(e1071)
library(corrplot)
Playing_with_your_data()
library(PracSeriesTiempo)
Playing_with_your_data()
library(PracSeriesTiempo)
library(boot)
library(shiny)
library(e1071)
library(corrplot)
Playing_with_your_data()
library(PracSeriesTiempo)
library(boot)
library(shiny)
library(e1071)
library(corrplot)
Playing_with_your_data()
library(boot)
library(shiny)
library(e1071)
library(corrplot)
Playing_with_your_data()
library(PracSeriesTiempo)
library(boot)
library(shiny)
library(e1071)
library(corrplot)
Playing_with_your_data()
library(PracSeriesTiempo)
library(boot)
library(shiny)
library(e1071)
library(corrplot)
Playing_with_your_data()
library(PracSeriesTiempo)
library(boot)
library(shiny)
library(e1071)
library(corrplot)
Playing_with_your_data()
library(PracSeriesTiempo)
library(boot)
library(shiny)
library(e1071)
library(corrplot)
Playing_with_your_data()
library(PracSeriesTiempo)
library(PracSeriesTiempo)
Playing_with_your_data()
library(PracSeriesTiempo)
Playing_with_your_data()
library(PracSeriesTiempo)
Playing_with_your_data()
library(PracSeriesTiempo)
library(boot)
library(shiny)
library(e1071)
library(corrplot)
Playing_with_your_data()
library(PracSeriesTiempo)
Playing_with_your_data()
library(PracSeriesTiempo)
Playing_with_your_data()
library(PracSeriesTiempo)
Playing_with_your_data()
library(PracSeriesTiempo)
Playing_with_your_data()
library(PracSeriesTiempo)
Playing_with_your_data()
Playing_with_your_data()
library(PracSeriesTiempo)
Playing_with_your_data()
library(PracSeriesTiempo)
Playing_with_your_data()
runApp('R')
library(PracSeriesTiempo)
runApp('R')
library(PracSeriesTiempo)
runApp('R')
library(PracSeriesTiempo)
runApp('R')
library(PracSeriesTiempo)
runApp('R')
runApp('R')
library(PracSeriesTiempo)
runApp('R')
library(PracSeriesTiempo)
runApp('R')
library(PracSeriesTiempo)
runApp('R')
library(PracSeriesTiempo)
runApp('R')
library(PracSeriesTiempo)
runApp('R')
library(PracSeriesTiempo)
runApp('R')
library(PracSeriesTiempo)
runApp('R')
library(PracSeriesTiempo)
library(PracSeriesTiempo)
runApp('R')
library(PracSeriesTiempo)
runApp('R')
library(PracSeriesTiempo)
runApp('R')
library(PracSeriesTiempo)
runApp('R')
library(PracSeriesTiempo)
runApp('R')
runApp()
library(PracSeriesTiempo)
runApp()
library(PracSeriesTiempo)
runApp()
library(PracSeriesTiempo)
runApp()
runApp()
library(PracSeriesTiempo)
runApp()
library(PracSeriesTiempo)
runApp()
library(PracSeriesTiempo)
runApp()
library(PracSeriesTiempo)
runApp()
library(PracSeriesTiempo)
runApp()
library(PracSeriesTiempo)
runApp()
library(PracSeriesTiempo)
runApp()
library(PracSeriesTiempo)
runApp()
library(PracSeriesTiempo)
runApp()
library(PracSeriesTiempo)
runApp()
library(PracSeriesTiempo)
runApp()
runApp()
library(PracSeriesTiempo)
runApp()
runApp()
library(PracSeriesTiempo)
runApp()
library(PracSeriesTiempo)
runApp()
library(PracSeriesTiempo)
runApp()
library(PracSeriesTiempo)
runApp()
runApp()
library(PracSeriesTiempo)
runApp()
gas = scan('http://www.uam.es/joser.berrendero/datos/gas6677.dat')
head(gas)
gas
length(gas)
gas = scan('http://www.uam.es/joser.berrendero/datos/gas6677.dat')
plot(gas)
freq=12 #mes
start_year=1966,
period=1
gas.ts=ts(data = gas, start=c(strat_year,period), frequency = freq)
gas.ts=ts(data = gas, start=c(start_year,period), frequency = freq)
#3. Tratar los datos como una serie de tiempo.
freq=12 #mes
start_year=1966,
period=1
gas.ts=ts(data = gas, start=c(start_year,period), frequency = freq)
length(gas)
gas.ts=ts(data = gas, start=c(start_year,period), frequency = freq)
started <- c(start_year, period)
freq<-12 #mes
start_year<-1966
gas.ts=ts(data = gas, start=c(start_year,period), frequency = freq)
gas.ts
freq<-12 #mes
start_year<-1966
period=2
gas.ts=ts(data = gas, start=c(start_year,period), frequency = freq)
gas.ts
print(gas.ts)
plot(gas.ts)
#3. Tratar los datos como una serie de tiempo.
freq<-12          ##Define frequencia de los datos
start_year<-1966  ##Define año de inicio
period=1          ##Define periodo de inicio.
#3. Definir la Serie con base a los parámetros indicados por el usuario.
gas.ts=ts(data = gas, start=c(start_year,period), frequency = freq)
#3. Imprimir los datos de la serie
print(gas.ts)
#4. Pintar la serie
plot(gas.ts)
boxplot(gast.ts~cycle(gas.ts))
boxplot(gas.ts~cycle(gas.ts))
boxplot(gas.ts~ cycle(gas.ts))
freq<-4         ##Define frequencia de los datos
start_year<-1966  ##Define año de inicio
period=1          ##Define periodo de inicio.
#3. Definir la Serie con base a los parámetros indicados por el usuario.
gas.ts=ts(data = gas, start=c(start_year,period), frequency = freq)
#3. Imprimir los datos de la serie
print(gas.ts)
#4. Comparar el consumo de gasolina para para periodo
boxplot(gas.ts~ cycle(gas.ts))
#4. Pintar la serie
plot(gas.ts)
boxplot(gas.ts~ cycle(gas.ts))
cycle(gas.ts)
freq<-12         ##Define frequencia de los datos
start_year<-1966  ##Define año de inicio
period=1          ##Define periodo de inicio.
#3. Definir la Serie con base a los parámetros indicados por el usuario.
gas.ts=ts(data = gas, start=c(start_year,period), frequency = freq)
#3. Imprimir los datos de la serie
print(gas.ts)
#4. Pintar la serie
plot(gas.ts)
#5. Comparar el consumo de gasolina para para periodo
boxplot(gas.ts~ cycle(gas.ts))
#6. Determinar la unidad de tiempo a la que pertenece cada observación de la serie:
##El comando "cycle" determina la unidad de tiempo a la que pertene cada observación de la serie.
cycle(gas.ts)
gas.ts.desc=decompose(gas.ts)
gas.ts.desc=decompose(gas.ts)
plot(gas.ts.desc, xlab='Año')
plot(gas.ts.desc$figure, xlab='Año')
line(gas.ts.desc$seasonal, xlab='Año')
line(gas.ts.desc$seasonal)
plot(gas.ts.desc$figure, xlab='Año')
lines(gas.ts.desc$seasonal)
lines(gas.ts.desc$seasonal)
plot(gas.ts.desc$seasonal, xlab='Año')
plot(gas.ts.desc$trend, xlab='Año')
plot(gas.ts.desc$figure, xlab='Año')
lines(gas.ts.desc$seasonal, xlab='Año')
lines(gas.ts.desc$seasonal, xlab='Año')
plot(gas.ts.desc$figure, xlab='Año')
plot(gas.ts.desc$seasonal, xlab='Año')
lines(gas.ts.desc$seasonal, xlab='Año')
plot(gas.ts.desc, xlab='Año')
plot(gas.ts.desc$random, xlab='Año')
gas.ts.desc=decompose(gas.ts, type = c("additive", "multiplicative"), )
plot(gas.ts.desc, xlab='Año')
plot(gas.ts.desc$figure, xlab='Año')
plot(gas.ts.desc$seasonal, xlab='Año')
plot(gas.ts.desc$trend, xlab='Año')
plot(gas.ts.desc$random, xlab='Año')
gas.ts.desc=decompose(gas.ts, type = c("additive", "multiplicative") )
plot(gas.ts.desc, xlab='Año')
gas.ts.desc=decompose(gas.ts )
plot(gas.ts.desc, xlab='Año')
plot(gas.ts.desc$seasonal, xlab='Año')
