plot(y,
type='o',
ylim=c(min(x,y), max(x,y)),
pch=20)
lines(x,)
lines(x,
col='red',
lwd=4)
grid()
options(repr.plot.with = 10, repr.plot.heigt = 6)
plot(y,
type='o',
ylim=c(min(x,y), max(x,y)),
pch=20)
lines(x,
col='red',
lwd=4)
data=cumsum(rnorm(84)
data=cumsum(rnorm(84))
data<-cumsum(rnorm(84))
x<-ts(data, #Generar 20 datos aleatorios
start=c(1959, 2),        #Empezar en 1959 trimestre 2
frequency = 3            #Frecuencia trimestral
)
####Se genera una serie de tiempo mesuales:
y<-ts(data,  ##generar datos aleantorios
start=c(1958, 1),        ##empezar en enero 1985
frequency = 12)
options(repr.plot.with = 10, repr.plot.heigt = 6)
plot(y,
type='o',
ylim=c(min(x,y), max(x,y)),
pch=20)
lines(x,
col='red',
lwd=4)
x<-ts(data, #Generar 20 datos aleatorios
start=c(1959, 1),        #Empezar en 1959 trimestre 2
frequency = 3            #Frecuencia trimestral
)
##Pintar la serie de tiempos:
options(repr.plot.with = 10, repr.plot.heigt = 6)
plot(y,
type='o',
ylim=c(min(x,y), max(x,y)),
pch=20)
lines(x,
col='red',
lwd=4)
y<-ts(data,  ##generar datos aleantorios
start=c(1959, 1),        ##empezar en enero 1985
frequency = 12)          ##datos mensuales
##Pintar la serie de tiempos:
options(repr.plot.with = 10, repr.plot.heigt = 6)
plot(y,
type='o',
ylim=c(min(x,y), max(x,y)),
pch=20)
lines(x,
col='red',
lwd=4)
mación del tipo de objeto:
str(x)
str(y)
er a los componentes de un objeto de serie de tiempo.
x[2:4]
y[3:3]
Sys.Date()
x<-c("1jan1960", "2JAN1960", "31mar1960", "30jul1960")
as.Date(x, format="%d%b%y")
x<-c("1jan1960", "2JAN1960", "31mar1960", "30jul1960")
as.Date(x, format="%d%b%Y")
x<-rep(0,200)
x[1]<-10
for(t in 2:200){
x[t]=x[t-1] + 0.1*rnorm(1)
}
plot(x, type='1')
x<-rep(0,200)
x[1]<-10
for(t in 2:200){
x[t]=x[t-1] + 0.1*rnorm(1)
}
plot(x, type='1')
plot(x, type='l')
x<-c("1jan1960", "2JAN1960", "31mar1960", "30jul1960")
as.Date(x, format="%d%b%y")
x<-c("1jan1960", "2JAN1960", "31mar1960", "30jul1960")
as.Date(x, format="%d%B%y")
ión de autocorrelacion:
acf(x)
acf(x)
x<-0.1*rnorm(200)
x[1]<-10
x<-comsum(x) ##suma acumulada
acf(x, ylim=c(-1,1))
x<-0.1*rnorm(200)
x[1]<-10
x<-comsum(x) ##suma acumulada
##Función de autocorrelacion:
x<-0.1*rnorm(200)
x[1]<-10
x<-cumsum(x) ##suma acumulada
acf(x, ylim=c(-1,1))
acf(x)
as.Date(x, format="%d%B%y")
x<-c("02/27/92", "02/27/92", "02/28/92")
as.Date(x, "%m/%d/%y")
as.Date(x, "%d/%m/%y")
##datos en formato 'm/d/y'
x<-c("02/27/92", "02/27/92", "02/28/92")
as.Date(x, "%m/%d/%y")
x<-c("27/02/92", "28/03/92", "29/04/92")
as.Date(x, "%d/%m/%y")
T<-200
y<-rep(0, T)
e<-0.1*rnorm(200)
for(t in 2:T){
y[t]=0.5*e[t-1] +e[t]
}
plot(y, type=1)
plot(y, type='l')
T<-200
y<-rep(0, T)
e<-0.1*rnorm(200)
for(t in 2:T){
y[t]=0.5*e[t-1] +e[t]
}
plot(y, type='l')
acf(y)
##Fecha como número de dias desde 1900-01-01
as.Date(32768, origin="1900-01-01")
##Fecha como número de dias desde 1900-01-01
as.Date(32768, origin="1900-01-02")
##Mes completo dia, Año
as.Date('April 26, 2001', format='%B %d, %Y')
as.Date('April 26, 2001', format='%B %d, %Y')
##Mes completo dia, Año
as.Date('April 26, 2001', format='%B %d %Y')
##Mes completo dia, Año
as.Date('April 26, 2001', format='%B%d%Y')
##Mes completo dia, Año
as.Date('April 26, 2001', format='%B %d, %Y')
T=100
y<-rp(0,T)
e<-rnom(0,0.1^2)
for(t in 2:T){
y[t]=10 + 0.7*t + e[t]
}
plot(y)
T=100
y<-rep(0,T)
e<-rnom(100, 0 , 0,1)
for(t in 1:T){
y[t]=10 + 0.7*t + e[t]
}
T=100
y<-rep(0,T)
e<-rnom(100, 0 , 0,1)
for(t in 1:T){
y[t]=10 + 0.7*t + e[t]
}
T=100
y<-rep(0,T)
e<-rnorm(100, 0 , 0,1)
for(t in 1:T){
y[t]=10 + 0.7*t + e[t]
}
plot(y)
T=100
y<-rep(0,T)
e<-rnorm(100, 0 , 0.1)
for(t in 1:T){
y[t]=10 + 0.7*t + e[t]
}
plot(y)
T=100
y<-rep(0,T)
e<-rnorm(100, 0 , 1)
for(t in 1:T){
y[t]=10 + 0.7*t + e[t]
}
plot(y, type='l')
T=120
pron<-rep(0,T)
e<-rnorm(100, 0 , 1)
for(t in 1:T){
if(t<=100){
pron[t]=10 + 0.7*t + e[t]
}else
pron[t]=10 + 0.7*t ##El pronostico es in error
}
plot(y, type='l')
line(pron, type='l')
plot(pron, type='l')
?pnorm
T=100
y<-rep(0,T)
e<-rnorm(100, 0 , 1)
for(t in 1:T){
y[t]=10 + 0.7*t + e[t]
}
plot(y, type='l')
T<-100
X<-pred(0,T)
for(t in 1:T) x[t] = 10 ´0.7*t + rnorm(1)
plort(x, type='l')
##Lo que el profesor hizo
T<-100
X<-pred(0,T)
for(t in 1:T) x[t] = 10 + 0.7*t + rnorm(1)
plort(x, type='l')
T<-100
X<-pred(0,T)
for(t in 1:T) x[t] = 10 + 0.7*t + rnorm(1)
plot(x, type='l')
H=20
x.pred<-rep(0, H)
for(t in 1:H) x.pred[t] =10 +0.7*(T+t)
plot(x=1:120, y=x, tp)
H=20
x.pred<-rep(0, H)
for(t in 1:H) x.pred[t] =10 +0.7*(T+t)
plot(x=1:120, y=x, type='l')
plot(x=1:100, y=x, type='l', xlim=c(1,120))
##Lo que el profesor hizo
T<-100
X<-pred(0,T)
for(t in 1:T) x[t] = 10 + 0.7*t + rnorm(1)
plot(x, type='l')
H=20
x.pred<-rep(0, H)
for(t in 1:H) x.pred[t] =10 +0.7*(T+t)
plot(x=1:100, y=x, type='l', xlim=c(1,120))
plot(x=1:100, y=x, type='l', xlim=c(1,120), ylim=c(10, 140))
lines(x=101:120, y=x.pred, col='red')
LS<-rep(0,H)
for(t in 1:H) LS[t] = x.pred[t] + sqrt(t)
lines(x=101:120, y=LS, col='red')
LI<-rep(0,H)
LS<-rep(0,H)
for(t in 1:H) LS[t] = x.pred[t] + sqrt(t)
lines(x=101:120, y=LS, col='red')
LI<-rep(0,H)
for(t in 1:H) LI[t] = x.pred[t] + sqrt(t)
lines(x=101:120, y=LI, col='red')
Plot(x=1:100, y=x, type='l', xlim=c(1,120), ylim=c(10,100))
plot(x=1:100, y=x, type='l', xlim=c(1,120), ylim=c(10,100))
LS<-c(x[100], LS)
LI<-c(x[100], LI)
x.pred  <-c(x[100], x.pred)
line(x=100:120, y=LI, col='red')
line(x=100:120, y=LI, col='red')
x.pred  <-c(x[100], x.pred)
line(x=100:120, y=LI, col='red')
remove(col)
lines(x=100:120, y=LI, col='red')
lines(x=100:120, y=LI, col='red')
lines(x=100:120, y=LI, col='red')
lines(x=100:120, y=x.pred, col='red')
lines(x=100:120, y=LS, col='red')
lines(x=100:120, y=LS, col='red')
plot(x=1:100, y=x, type='l', xlim=c(1,120), ylim=c(10,100))
LS<-c(x[100], LS)
LI<-c(x[100], LI)
x.pred  <-c(x[100], x.pred)
lines(x=100:120, y=LI, col='red')
x.pred<-c(x[100], x.pred)
lines(x=100:120, y=LI, col='red')
plot(x=1:100, y=x, type='l', xlim=c(1,120), ylim=c(10,100))
LS<-c(x[100], LS)
LI<-c(x[100], LI)
x.pred<-c(x[100], x.pred)
lines(x=100:120, y=LI, col='red')
lines(x=100:120, y=LS, col='red')
lines(x=100:120, y=x.pred, col='red')
plot(x=1:100, y=x, type='l', xlim=c(1,120), ylim=c(10,100))
LS<-c(x[100], LS)
LI<-c(x[100], LI)
x.pred<-c(x[100], x.pred)
lines(x=100:120, y=LI, col='red')
lines(x=100:120, y=LS, col='red')
##Lo que el profesor hizo
T<-100
X<-pred(0,T)
for(t in 1:T) x[t] = 10 + 0.7*t + rnorm(1)
plot(x, type='l')
H=20
x.pred<-rep(0, H)
for(t in 1:H) x.pred[t] =10 +0.7*(T+t)
plot(x=1:100, y=x, type='l', xlim=c(1,120))
plot(x=1:100, y=x, type='l', xlim=c(1,120), ylim=c(10, 140))
lines(x=101:120, y=x.pred, col='red')
LS<-rep(0,H)
for(t in 1:H) LS[t] = x.pred[t] + sqrt(t)
lines(x=101:120, y=LS, col='red')
LI<-rep(0,H)
for(t in 1:H) LI[t] = x.pred[t] + sqrt(t)
lines(x=101:120, y=LI, col='red')
plot(x=1:100, y=x, type='l', xlim=c(1,120), ylim=c(10,100))
LS<-c(x[100], LS)
LI<-c(x[100], LI)
x.pred<-c(x[100], x.pred)
lines(x=100:120, y=LI, col='red')
lines(x=100:120, y=LS, col='red')
lines(x=100:120, y=x.pred, col='red')
plot(x=1:100, y=x, type='l', xlim=c(1,120), ylim=c(10,100))
LS<-c(x[100], LS)
LI<-c(x[100], LI)
x.pred<-c(x[100], x.pred)
lines(x=100:120, y=LI, col='red')
lines(x=100:120, y=LS, col='red')
lines(x=100:120, y=x.pred, col='red')
plot(x=1:100, y=x, type='l', xlim=c(1,120), ylim=c(10,100))
LS<-c(x[100], LS)
LI<-c(x[100], LI)
x.pred<-c(x[100], x.pred)
lines(x=100:120, y=LI, col='red')
lines(x=100:120, y=LS, col='red')
lines(x=100:120, y=x.pred, col='red')
T<-100
X<-pred(0,T)
for(t in 1:T) x[t] = 10 + 0.7*t + rnorm(1)
plot(x, type='l')
H=20
x.pred<-rep(0, H)
for(t in 1:H) x.pred[t] =10 +0.7*(T+t)
plot(x=1:100, y=x, type='l', xlim=c(1,120))
plot(x=1:100, y=x, type='l', xlim=c(1,120), ylim=c(10, 140))
lines(x=101:120, y=x.pred, col='red')
LS<-rep(0,H)
for(t in 1:H) LS[t] = x.pred[t] + sqrt(t)
lines(x=101:120, y=LS, col='red')
plot(x=1:100, y=x, type='l', xlim=c(1,120), ylim=c(10,100))
LS<-c(x[100], LS)
LI<-c(x[100], LI)
x.pred<-c(x[100], x.pred)
lines(x=100:120, y=LI, col='red')
lines(x=100:120, y=LS, col='red')
lines(x=100:120, y=x.pred, col='red')
T=100
y<-rep(0,T)
e<-rnorm(100, 0 , 1)
for(t in 1:T){
y[t]=10 + 0.7*t + e[t]
}
plot(y, type='l')
RL<-lm(y~t)
y <- ts(y,frequency = 4,start = c(2005,1)) # objeto time-series, variable dependiente
t <- seq(1:length(y))                      # variable independiente t: tiempo
m <- lm(formula = y ~ t)                             # ajuste del modelo
m
plot(m)
m$coefficients
m$coe
m[1]
intercepto<-c()
pendiente<-c()
for (i in 1:1000) {
y <- ts(y,frequency = 4,start = c(2005,1)) # objeto time-series, variable dependiente
t <- seq(1:length(y))                      # variable independiente t: tiempo
m <- lm(formula = y ~ t)  # ajuste del modelo
intercepto[i]<-m$coefficients[1]
pendientes[i]<-m$coefficients[2]
}
intercepto<-c()
pendiente<-c()
for (i in 1:1000) {
y <- ts(y,frequency = 4,start = c(2005,1)) # objeto time-series, variable dependiente
t <- seq(1:length(y))                      # variable independiente t: tiempo
m <- lm(formula = y ~ t)  # ajuste del modelo
intercepto[i]<-m$coefficients[1]
pendiente[i]<-m$coefficients[2]
}
intercepto
intercepto<-c()
pendiente<-c()
for (i in 1:1000) {
e<-rnorm(100, 0 , 1)
for(t in 1:T){
y[t]=10 + 0.7*t + e[t]
}
y <- ts(y,frequency = 4,start = c(2005,1)) # objeto time-series, variable dependiente
t <- seq(1:length(y))                      # variable independiente t: tiempo
m <- lm(formula = y ~ t)  # ajuste del modelo
intercepto[i]<-m$coefficients[1]
pendiente[i]<-m$coefficients[2]
}
intercepto
pendiente
hist(intercepto)
hist(pendiente)
for (i in 1:1000) {
e<-rnorm(100, 0 , 1)
for(t in 1:T){
y[t]=0 + 0.7*t + e[t]
}
y <- ts(y,frequency = 4,start = c(2005,1)) # objeto time-series, variable dependiente
t <- seq(1:length(y))                      # variable independiente t: tiempo
m <- lm(formula = y ~ t)  # ajuste del modelo
intercepto[i]<-m$coefficients[1]
pendiente[i]<-m$coefficients[2]
}
hist(intercepto)
hist(pendiente)
hist(intercepto)
T<-100
X<-pred(0,T)
for(t in 1:T) x[t] = 10 + 0.8*t + 0.05*t^2 +rnorm(1)
plot(x, type='l')
T<-100
x<-pred(0,T)
for(t in 1:T) x[t] = 10 + 0.8*t + 0.05*t^2 +rnorm(1)
plot(x, type='l')
x<-pred(0,T)
T<-100
x<-rep(0,T)
for(t in 1:T) x[t] = 10 + 0.8*t + 0.05*t^2 +rnorm(1)
plot(x, type='l')
H=20
x.pred<-rep(0, H)
plot(x=1:100, y=x, type='l', xlim=c(1,120))
plot(x=1:100, y=x, type='l', xlim=c(1,120), ylim=c(10, 140))
plot(x=1:100, y=x, type='l', xlim=c(1,120), ylim=c(10, 1000))
lines(x=101:120, y=x.pred, col='red')
T<-100
x<-rep(0,T)
for(t in 1:T) x[t] = 10 + 0.8*t + 0.05*t^2 +rnorm(1)
plot(x, type='l')
H=20
x.pred<-rep(0, H)
for(t in 1:H) x.pred[t] =10 + 0.8*(T+t) + 0.05*(T+t)^2
plot(x=1:100, y=x, type='l', xlim=c(1,120), ylim=c(10, 1000))
lines(x=101:120, y=x.pred, col='red')
LS<-rep(0,H)
for(t in 1:H) LS[t] = x.pred[t] + sqrt(t)
lines(x=101:120, y=LS, col='red')
LI<-rep(0,H)
for(t in 1:H) LI[t] = x.pred[t] + sqrt(t)
lines(x=101:120, y=LI, col='red')
x <- ts(data = c( 12.82, 13.03, 11.58, 11.77,
12.84, 13.07, 12.36, 12.14,
12.96, 13.63, 12.83, 12.16,
13.98, 13.88, 13.14, 13.27,
13.90, 14.24, 13.46, 13.25,
14.54, 14.45, 14.08, 13.83),
freq=4,
start=c(2010, 01))
x
options(repr.plot.width=6, repr.plot.heigt = 4)
plot(x)
grid()
T<-length(x)
T
t<-seq(1:(T-4))
t
x.fit<-window(x, start=c(2010,1), end=c(2014,4))
x.for<-window(x, start=c(2010,1), end=c(2014,4))
x.fit
x.fit
x.for
Q1<-rep(0,40)
Q2<-rep(0,40)
Q3<-rep(0,40)
while(i <= 40){
Q1[i]<- 1
i=i+4
}
Q1
i=1
while(i <= 40){
Q1[i]<- 1
i=i+4
}
Q1
while(j <= 40){
Q2[j]<- 1
i=i+4
}
Q2
j=2
while(j <= 40){
Q2[j]<- 1
j=j+4
}
Q2
k=3
while(k <= 40){
Q3[k]<- 1
k=k+4
}
Q3
T<-40
x<-rep(0,T)
for(t in 1:T) x[t] = 10 + 0.8*t + 0.05*t^2 + 1.5*Q1[t] + 1.0*Q2[i] 0.3*Q3[i] + rnorm(1)
plot(x, type='l')
T<-40
x<-rep(0,T)
for(t in 1:T) x[t] = 10 + 0.8*t + 0.05*t^2 + 1.5*Q1[t] + 1.0*Q2[t] 0.3*Q3[t] + e(t)
plot(x, type='l')
T<-40
x<-rep(0,T)
for(t in 1:T) x[t] = 10 + 0.8*t + 0.05*t^2 + 1.5*Q1[t] + 1.0*Q2[t] 0.3*Q3[t] + e[t]
plot(x, type='l')
T<-40
x<-rep(0,T)
for(t in 1:T) x[t] = 10 + 0.8*t + 0.05*t^2 + 1.5*Q1[t] + 1.0*Q2[t] + 0.3*Q3[t] + e[t]
plot(x, type='l')
T<-40
x<-rep(0,T)
for(t in 1:T) x[t] = 10 + 0.8*t + 0.05*t^2 + 8.5*Q1[t] + 5.6*Q2[t] - 0.3*Q3[t] + e[t]
plot(x, type='l')
