library(corrplot)
Playing_with_your_data()
library(PracSeriesTiempo)
library(boot)
library(shiny)
library(e1071)
library(corrplot)
Playing_with_your_data()
library(PracSeriesTiempo)
library(boot)
library(shiny)
library(e1071)
library(corrplot)
Playing_with_your_data()
library(PracSeriesTiempo)
library(boot)
library(shiny)
library(e1071)
library(corrplot)
Playing_with_your_data()
library(PracSeriesTiempo)
library(boot)
library(shiny)
library(e1071)
library(corrplot)
Playing_with_your_data()
library(PracSeriesTiempo)
library(boot)
library(shiny)
library(e1071)
library(corrplot)
Playing_with_your_data()
library(PracSeriesTiempo)
library(boot)
library(shiny)
library(e1071)
library(corrplot)
Playing_with_your_data()
library(PracSeriesTiempo)
library(boot)
library(shiny)
library(e1071)
library(corrplot)
Playing_with_your_data()
library(PracSeriesTiempo)
library(boot)
library(shiny)
library(e1071)
library(corrplot)
Playing_with_your_data()
library(PracSeriesTiempo)
library(boot)
library(shiny)
library(e1071)
library(corrplot)
Playing_with_your_data()
library(PracSeriesTiempo)
library(boot)
library(shiny)
library(e1071)
library(corrplot)
Playing_with_your_data()
library(PracSeriesTiempo)
library(PracSeriesTiempo)
library(boot)
library(shiny)
library(e1071)
library(corrplot)
Playing_with_your_data()
library(PracSeriesTiempo)
library(boot)
library(shiny)
library(e1071)
library(corrplot)
Playing_with_your_data()
library(PracSeriesTiempo)
library(boot)
library(shiny)
library(e1071)
library(corrplot)
Playing_with_your_data()
library(PracSeriesTiempo)
library(boot)
library(shiny)
library(e1071)
library(corrplot)
Playing_with_your_data()
library(PracSeriesTiempo)
library(boot)
library(shiny)
library(e1071)
library(corrplot)
Playing_with_your_data()
library(PracSeriesTiempo)
library(boot)
library(shiny)
library(e1071)
library(corrplot)
Playing_with_your_data()
library(PracSeriesTiempo)
library(boot)
library(shiny)
library(e1071)
library(corrplot)
Playing_with_your_data()
library(PracSeriesTiempo)
library(boot)
library(shiny)
library(e1071)
library(corrplot)
Playing_with_your_data()
library(PracSeriesTiempo)
Playing_with_your_data()
library(PracSeriesTiempo)
library(boot)
library(shiny)
library(e1071)
library(corrplot)
Playing_with_your_data()
library(PracSeriesTiempo)
library(boot)
library(shiny)
library(e1071)
library(corrplot)
Playing_with_your_data()
library(boot)
library(shiny)
library(e1071)
library(corrplot)
Playing_with_your_data()
library(PracSeriesTiempo)
library(boot)
library(shiny)
library(e1071)
library(corrplot)
Playing_with_your_data()
library(PracSeriesTiempo)
library(boot)
library(shiny)
library(e1071)
library(corrplot)
Playing_with_your_data()
library(PracSeriesTiempo)
library(boot)
library(shiny)
library(e1071)
library(corrplot)
Playing_with_your_data()
library(PracSeriesTiempo)
library(boot)
library(shiny)
library(e1071)
library(corrplot)
Playing_with_your_data()
library(PracSeriesTiempo)
library(PracSeriesTiempo)
Playing_with_your_data()
library(PracSeriesTiempo)
Playing_with_your_data()
library(PracSeriesTiempo)
Playing_with_your_data()
library(PracSeriesTiempo)
library(boot)
library(shiny)
library(e1071)
library(corrplot)
Playing_with_your_data()
library(PracSeriesTiempo)
Playing_with_your_data()
library(PracSeriesTiempo)
Playing_with_your_data()
library(PracSeriesTiempo)
Playing_with_your_data()
library(PracSeriesTiempo)
Playing_with_your_data()
library(PracSeriesTiempo)
Playing_with_your_data()
Playing_with_your_data()
library(PracSeriesTiempo)
Playing_with_your_data()
library(PracSeriesTiempo)
Playing_with_your_data()
runApp('R')
library(PracSeriesTiempo)
runApp('R')
library(PracSeriesTiempo)
runApp('R')
library(PracSeriesTiempo)
runApp('R')
library(PracSeriesTiempo)
runApp('R')
runApp('R')
library(PracSeriesTiempo)
runApp('R')
library(PracSeriesTiempo)
runApp('R')
library(PracSeriesTiempo)
runApp('R')
library(PracSeriesTiempo)
runApp('R')
library(PracSeriesTiempo)
runApp('R')
library(PracSeriesTiempo)
runApp('R')
library(PracSeriesTiempo)
runApp('R')
library(PracSeriesTiempo)
library(PracSeriesTiempo)
runApp('R')
library(PracSeriesTiempo)
runApp('R')
library(PracSeriesTiempo)
runApp('R')
library(PracSeriesTiempo)
runApp('R')
library(PracSeriesTiempo)
runApp('R')
runApp()
library(PracSeriesTiempo)
runApp()
library(PracSeriesTiempo)
runApp()
library(PracSeriesTiempo)
runApp()
runApp()
library(PracSeriesTiempo)
runApp()
library(PracSeriesTiempo)
runApp()
library(PracSeriesTiempo)
runApp()
library(PracSeriesTiempo)
runApp()
library(PracSeriesTiempo)
runApp()
library(PracSeriesTiempo)
runApp()
library(PracSeriesTiempo)
runApp()
library(PracSeriesTiempo)
runApp()
library(PracSeriesTiempo)
runApp()
library(PracSeriesTiempo)
runApp()
library(PracSeriesTiempo)
runApp()
runApp()
library(PracSeriesTiempo)
runApp()
runApp()
library(PracSeriesTiempo)
runApp()
library(PracSeriesTiempo)
runApp()
library(PracSeriesTiempo)
runApp()
library(PracSeriesTiempo)
runApp()
runApp()
library(PracSeriesTiempo)
runApp()
gas = scan('http://www.uam.es/joser.berrendero/datos/gas6677.dat')
head(gas)
gas
length(gas)
gas = scan('http://www.uam.es/joser.berrendero/datos/gas6677.dat')
plot(gas)
freq=12 #mes
start_year=1966,
period=1
gas.ts=ts(data = gas, start=c(strat_year,period), frequency = freq)
gas.ts=ts(data = gas, start=c(start_year,period), frequency = freq)
#3. Tratar los datos como una serie de tiempo.
freq=12 #mes
start_year=1966,
period=1
gas.ts=ts(data = gas, start=c(start_year,period), frequency = freq)
length(gas)
gas.ts=ts(data = gas, start=c(start_year,period), frequency = freq)
started <- c(start_year, period)
freq<-12 #mes
start_year<-1966
gas.ts=ts(data = gas, start=c(start_year,period), frequency = freq)
gas.ts
freq<-12 #mes
start_year<-1966
period=2
gas.ts=ts(data = gas, start=c(start_year,period), frequency = freq)
gas.ts
print(gas.ts)
plot(gas.ts)
#3. Tratar los datos como una serie de tiempo.
freq<-12          ##Define frequencia de los datos
start_year<-1966  ##Define año de inicio
period=1          ##Define periodo de inicio.
#3. Definir la Serie con base a los parámetros indicados por el usuario.
gas.ts=ts(data = gas, start=c(start_year,period), frequency = freq)
#3. Imprimir los datos de la serie
print(gas.ts)
#4. Pintar la serie
plot(gas.ts)
boxplot(gast.ts~cycle(gas.ts))
boxplot(gas.ts~cycle(gas.ts))
boxplot(gas.ts~ cycle(gas.ts))
freq<-4         ##Define frequencia de los datos
start_year<-1966  ##Define año de inicio
period=1          ##Define periodo de inicio.
#3. Definir la Serie con base a los parámetros indicados por el usuario.
gas.ts=ts(data = gas, start=c(start_year,period), frequency = freq)
#3. Imprimir los datos de la serie
print(gas.ts)
#4. Comparar el consumo de gasolina para para periodo
boxplot(gas.ts~ cycle(gas.ts))
#4. Pintar la serie
plot(gas.ts)
boxplot(gas.ts~ cycle(gas.ts))
cycle(gas.ts)
freq<-12         ##Define frequencia de los datos
start_year<-1966  ##Define año de inicio
period=1          ##Define periodo de inicio.
#3. Definir la Serie con base a los parámetros indicados por el usuario.
gas.ts=ts(data = gas, start=c(start_year,period), frequency = freq)
#3. Imprimir los datos de la serie
print(gas.ts)
#4. Pintar la serie
plot(gas.ts)
#5. Comparar el consumo de gasolina para para periodo
boxplot(gas.ts~ cycle(gas.ts))
#6. Determinar la unidad de tiempo a la que pertenece cada observación de la serie:
##El comando "cycle" determina la unidad de tiempo a la que pertene cada observación de la serie.
cycle(gas.ts)
gas.ts.desc=decompose(gas.ts)
gas.ts.desc=decompose(gas.ts)
plot(gas.ts.desc, xlab='Año')
plot(gas.ts.desc$figure, xlab='Año')
line(gas.ts.desc$seasonal, xlab='Año')
line(gas.ts.desc$seasonal)
plot(gas.ts.desc$figure, xlab='Año')
lines(gas.ts.desc$seasonal)
lines(gas.ts.desc$seasonal)
plot(gas.ts.desc$seasonal, xlab='Año')
plot(gas.ts.desc$trend, xlab='Año')
plot(gas.ts.desc$figure, xlab='Año')
lines(gas.ts.desc$seasonal, xlab='Año')
lines(gas.ts.desc$seasonal, xlab='Año')
plot(gas.ts.desc$figure, xlab='Año')
plot(gas.ts.desc$seasonal, xlab='Año')
lines(gas.ts.desc$seasonal, xlab='Año')
plot(gas.ts.desc, xlab='Año')
plot(gas.ts.desc$random, xlab='Año')
gas.ts.desc=decompose(gas.ts, type = c("additive", "multiplicative"), )
plot(gas.ts.desc, xlab='Año')
plot(gas.ts.desc$figure, xlab='Año')
plot(gas.ts.desc$seasonal, xlab='Año')
plot(gas.ts.desc$trend, xlab='Año')
plot(gas.ts.desc$random, xlab='Año')
gas.ts.desc=decompose(gas.ts, type = c("additive", "multiplicative") )
plot(gas.ts.desc, xlab='Año')
gas.ts.desc=decompose(gas.ts )
plot(gas.ts.desc, xlab='Año')
plot(gas.ts.desc$seasonal, xlab='Año')
library(PracSeriesTiempo)
shiny::runApp('R')
library(boot)
library(shiny)
library(e1071)
library(corrplot)
runApp('R')
runApp('R')
library(PracSeriesTiempo)
runApp('R')
library(PracSeriesTiempo)
runApp('R')
library(PracSeriesTiempo)
runApp('R')
library(PracSeriesTiempo)
runApp('R')
library(PracSeriesTiempo)
runApp('R')
Playing_with_your_data()
Playing_with_your_data()
library(PracSeriesTiempo)
library(shiny)
library(boot)
library(shiny)
library(e1071)
library(corrplot)
gas = scan('http://www.uam.es/joser.berrendero/datos/gas6677.dat')
library(PracSeriesTiempo)
runApp('R')
library(PracSeriesTiempo)
library(PracSeriesTiempo)
library(PracSeriesTiempo)
library(PracSeriesTiempo)
library(PracSeriesTiempo)
library(shiny)
library(e1071)
runApp('R')
library(PracSeriesTiempo)
runApp('R')
runApp()
library(PracSeriesTiempo)
runApp()
df_arima= ts(AirPassengers, frequency=12, start = (1940, 1), end=c(1958,12))
df_arima= ts(AirPassengers, frequency=12, start = c(1940, 1), end=c(1958,12))
df_arima
forecast::auto.arima(df_arima)
library(forecast)
install.packages(forecast)
install.packages("forecast")
forecast::auto.arima(df_arima)
head(AirPassengers)
AirPassengers
df_arima
##Los datos de AIRPASA... van desde el años 1949 a 1960
df_arima= ts(AirPassengers, frequency=12, start = c(1949, 1), end=c(1958,12))
df_arima
df_arima
AirPassengers
forecast::auto.arima(df_arima)
forecast::forecast(forecast::auto.arima(df_arima), h=24)
##forecast::auto.arima(df_arima)
##Predicción de los 24 meses siguientes.
forecast::forecast(forecast::auto.arima(df_arima), h=1)
forecast::forecast(forecast::auto.arima(df_arima), h=12)
AirPassengers
ts(AirPassengers, frequency=12, start = c(1949, 1))
ts(AirPassengers, frequency=4, start = c(1949, 1))
ts(AirPassengers, frequency=2, start = c(1949, 1))
ts(AirPassengers, frequency=12, start = c(1949, 1))
forecast::forecast(forecast::auto.arima(df_arima), h=12)
plot(forecast)
plot(forecast)
forecast::forecast(forecast::auto.arima(df_arima), h=12)
plot(forecast)
forecast
forecast
forecast=forecast(forecast::auto.arima(df_arima), h=12)
forecasts=forecast(forecast::auto.arima(df_arima), h=12)
forecast(forecast::auto.arima(df_arima), h=12)
forecast::forecast(forecast::auto.arima(df_arima), h=12)
a<-forecast::forecast(forecast::auto.arima(df_arima), h=12)
plot(a)
bería volverse a recrear, pero indicando el parámetro end
prediction<-forecast::forecast(forecast::auto.arima(df_arima), h=12)
prediction<-forecast::forecast(forecast::auto.arima(df_arima), h=12)
plot(prediction)
prediction<-forecast::forecast(forecast::auto.arima(df_arima), h=24)
plot(prediction)
prediction<-forecast::forecast(forecast::auto.arima(df_arima), h=12)
plot(prediction)
prediction<-forecast::forecast(forecast::auto.arima(df_arima), h=1)
plot(prediction)
prediction<-forecast::forecast(forecast::auto.arima(df_arima), h=36)
plot(prediction)
df_arima= ts(AirPassengers, frequency=12, start = c(1949, 1), end=c(1960,12))
df_arima
prediction<-forecast::forecast(forecast::auto.arima(df_arima), h=36)
plot(prediction)
df_arima= ts(AirPassengers, frequency=12, start = c(1949, 1), end=c(1958,12))
df_arima
##Predicción con modelo ARIMA y FORECAST:
##forecast::auto.arima(df_arima)
##Predicción de los 24 meses siguientes.
##Al momento de hacer la predicción, se debe solicitar al usuario cuántos periodos quiere predecir,
##en este caso, pedirle el parámetro "END".
##y la serie debería volverse a recrear, pero indicando el parámetro end
prediction<-forecast::forecast(forecast::auto.arima(df_arima), h=24)
plot(prediction)
lines(df_arima)
plot(prediction)
lines(df_arima)
plot(prediction)
line(df_arima)
plot(prediction)
lines(df_arima, t='l')
plot(prediction)
lines(df_arima, t='l')
lines(df_arima, t='l')
plot(df_arima)
plot(prediction)
lines(df_arima, t='l')
plot(df_arima)
lines(df_arima, t='l')
plot(prediction)
prediction<-forecast::forecast(forecast::auto.arima(df_arima, include.drift = T), h=24)
plot(prediction)
prediction<-forecast::forecast(forecast::auto.arima(df_arima, include.drift = T), h=24)
prediction<-forecast::forecast(forecast::auto.arima(df_arima, drift = T), h=24)
prediction<-forecast::forecast(forecast::auto.arima(df_arima), h=24)
plot(prediction)
prediction<-forecast::forecast(forecast::auto.arima(df_arima), h=60)
plot(prediction)
prediction<-forecast::forecast(forecast::auto.arima(df_arima), h=72)
plot(prediction)
fit = arima(log(AirPassengers), c(0, 1, 1), seasonal = list(order = c(0, 1, 1), period = 12))
pred <- predict(fit, n.ahead = 10*12)
ts.plot(AirPassengers,exp(pred$pred), log = "y", lty = c(1,3))
fit = arima(AirPassengers, c(0, 1, 1), seasonal = list(order = c(0, 1, 1), period = 12))
pred <- predict(fit, n.ahead = 10*12)
ts.plot(AirPassengers,exp(pred$pred), log = "y", lty = c(1,3))
prediction<-forecast::forecast(forecast::auto.arima(log(df_arima), h=72))
plot(prediction)
fit = arima(log(AirPassengers), c(0, 1, 1), seasonal = list(order = c(0, 1, 1), period = 12))
pred <- predict(fit, n.ahead = 10*12)
ts.plot(AirPassengers,exp(pred$pred), lty = c(1,3))
prediction<-forecast::forecast(forecast::auto.arima(log(df_arima), h=72))
plot(prediction)
ts.plot(AirPassengers,exp(pred$pred), log = "y", lty = c(1,3))
plot(prediction)
runApp()
