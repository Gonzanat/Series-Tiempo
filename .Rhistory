y<-rep(0,T)
e<-rnorm(100, 0 , 1)
for(t in 1:T){
y[t]=10 + 0.7*t + e[t]
}
plot(y, type='l')
RL<-lm(y~t)
y <- ts(y,frequency = 4,start = c(2005,1)) # objeto time-series, variable dependiente
t <- seq(1:length(y))                      # variable independiente t: tiempo
m <- lm(formula = y ~ t)                             # ajuste del modelo
m
plot(m)
m$coefficients
m$coe
m[1]
intercepto<-c()
pendiente<-c()
for (i in 1:1000) {
y <- ts(y,frequency = 4,start = c(2005,1)) # objeto time-series, variable dependiente
t <- seq(1:length(y))                      # variable independiente t: tiempo
m <- lm(formula = y ~ t)  # ajuste del modelo
intercepto[i]<-m$coefficients[1]
pendientes[i]<-m$coefficients[2]
}
intercepto<-c()
pendiente<-c()
for (i in 1:1000) {
y <- ts(y,frequency = 4,start = c(2005,1)) # objeto time-series, variable dependiente
t <- seq(1:length(y))                      # variable independiente t: tiempo
m <- lm(formula = y ~ t)  # ajuste del modelo
intercepto[i]<-m$coefficients[1]
pendiente[i]<-m$coefficients[2]
}
intercepto
intercepto<-c()
pendiente<-c()
for (i in 1:1000) {
e<-rnorm(100, 0 , 1)
for(t in 1:T){
y[t]=10 + 0.7*t + e[t]
}
y <- ts(y,frequency = 4,start = c(2005,1)) # objeto time-series, variable dependiente
t <- seq(1:length(y))                      # variable independiente t: tiempo
m <- lm(formula = y ~ t)  # ajuste del modelo
intercepto[i]<-m$coefficients[1]
pendiente[i]<-m$coefficients[2]
}
intercepto
pendiente
hist(intercepto)
hist(pendiente)
for (i in 1:1000) {
e<-rnorm(100, 0 , 1)
for(t in 1:T){
y[t]=0 + 0.7*t + e[t]
}
y <- ts(y,frequency = 4,start = c(2005,1)) # objeto time-series, variable dependiente
t <- seq(1:length(y))                      # variable independiente t: tiempo
m <- lm(formula = y ~ t)  # ajuste del modelo
intercepto[i]<-m$coefficients[1]
pendiente[i]<-m$coefficients[2]
}
hist(intercepto)
hist(pendiente)
hist(intercepto)
T<-100
X<-pred(0,T)
for(t in 1:T) x[t] = 10 + 0.8*t + 0.05*t^2 +rnorm(1)
plot(x, type='l')
T<-100
x<-pred(0,T)
for(t in 1:T) x[t] = 10 + 0.8*t + 0.05*t^2 +rnorm(1)
plot(x, type='l')
x<-pred(0,T)
T<-100
x<-rep(0,T)
for(t in 1:T) x[t] = 10 + 0.8*t + 0.05*t^2 +rnorm(1)
plot(x, type='l')
H=20
x.pred<-rep(0, H)
plot(x=1:100, y=x, type='l', xlim=c(1,120))
plot(x=1:100, y=x, type='l', xlim=c(1,120), ylim=c(10, 140))
plot(x=1:100, y=x, type='l', xlim=c(1,120), ylim=c(10, 1000))
lines(x=101:120, y=x.pred, col='red')
T<-100
x<-rep(0,T)
for(t in 1:T) x[t] = 10 + 0.8*t + 0.05*t^2 +rnorm(1)
plot(x, type='l')
H=20
x.pred<-rep(0, H)
for(t in 1:H) x.pred[t] =10 + 0.8*(T+t) + 0.05*(T+t)^2
plot(x=1:100, y=x, type='l', xlim=c(1,120), ylim=c(10, 1000))
lines(x=101:120, y=x.pred, col='red')
LS<-rep(0,H)
for(t in 1:H) LS[t] = x.pred[t] + sqrt(t)
lines(x=101:120, y=LS, col='red')
LI<-rep(0,H)
for(t in 1:H) LI[t] = x.pred[t] + sqrt(t)
lines(x=101:120, y=LI, col='red')
x <- ts(data = c( 12.82, 13.03, 11.58, 11.77,
12.84, 13.07, 12.36, 12.14,
12.96, 13.63, 12.83, 12.16,
13.98, 13.88, 13.14, 13.27,
13.90, 14.24, 13.46, 13.25,
14.54, 14.45, 14.08, 13.83),
freq=4,
start=c(2010, 01))
x
options(repr.plot.width=6, repr.plot.heigt = 4)
plot(x)
grid()
T<-length(x)
T
t<-seq(1:(T-4))
t
x.fit<-window(x, start=c(2010,1), end=c(2014,4))
x.for<-window(x, start=c(2010,1), end=c(2014,4))
x.fit
x.fit
x.for
Q1<-rep(0,40)
Q2<-rep(0,40)
Q3<-rep(0,40)
while(i <= 40){
Q1[i]<- 1
i=i+4
}
Q1
i=1
while(i <= 40){
Q1[i]<- 1
i=i+4
}
Q1
while(j <= 40){
Q2[j]<- 1
i=i+4
}
Q2
j=2
while(j <= 40){
Q2[j]<- 1
j=j+4
}
Q2
k=3
while(k <= 40){
Q3[k]<- 1
k=k+4
}
Q3
T<-40
x<-rep(0,T)
for(t in 1:T) x[t] = 10 + 0.8*t + 0.05*t^2 + 1.5*Q1[t] + 1.0*Q2[i] 0.3*Q3[i] + rnorm(1)
plot(x, type='l')
T<-40
x<-rep(0,T)
for(t in 1:T) x[t] = 10 + 0.8*t + 0.05*t^2 + 1.5*Q1[t] + 1.0*Q2[t] 0.3*Q3[t] + e(t)
plot(x, type='l')
T<-40
x<-rep(0,T)
for(t in 1:T) x[t] = 10 + 0.8*t + 0.05*t^2 + 1.5*Q1[t] + 1.0*Q2[t] 0.3*Q3[t] + e[t]
plot(x, type='l')
T<-40
x<-rep(0,T)
for(t in 1:T) x[t] = 10 + 0.8*t + 0.05*t^2 + 1.5*Q1[t] + 1.0*Q2[t] + 0.3*Q3[t] + e[t]
plot(x, type='l')
T<-40
x<-rep(0,T)
for(t in 1:T) x[t] = 10 + 0.8*t + 0.05*t^2 + 8.5*Q1[t] + 5.6*Q2[t] - 0.3*Q3[t] + e[t]
plot(x, type='l')
library(shiny)
library(shiny)
library(corrplot)
librar(e1071)
library(e1071)
library(PracSeriesTiempo)
Playing_with_your_data
Playing_with_your_data()
library(PracSeriesTiempo)
Playing_with_your_data()
library(boot)
#Function to obtain R-Squared from the data.
rsq<-function(formula, data, indices){
d<-data[indices,] #allow boot to select sample.
fit<-lm(formula, data=d)
print(fit)
return(summary(fit)$r.square)
}
#bootstrapping with 1000 replications
##Aplicación de regresión lineal para calcular la variable mgp en función de wt y disp
result<-boot(data=mtcars, statistic=rsq, R=1000, formula=mpg~wt+disp)
##view results
summary(result)
plot (result)
boot.ci(results, type="bca")
result$t #Para ver lo R valores calculados
plot (result)
boot.ci(results, type="bca")
boot.ci(result, type="bca")
boot.ci(result, type="basic")
boot.ci(result, type="bca")
boot.ci(result, type="basic")
fit<-paste(formula, "(", d, ")")
fit<-paste(formula, "(", ")")
return(summary(fit)$r.square)
}
rsq<-function(formula, data, indices){
d<-data[indices,] #allow boot to select sample.
fit<-paste(formula, '(', ')' )
print(fit)
##return(summary(fit)$r.square)
}
result<-boot(data=mtcars, statistic=rsq, R=1000, formula=mean)
result<-boot(data=mtcars, statistic=rsq, R=1000, formula='mean')
rsq<-function(formula, data, indices){
d<-data[indices,] #allow boot to select sample.
fit<-paste(formula, '(',d, ')' )
print(fit)
##return(summary(fit)$r.square)
}
#bootstrapping with 1000 replications
##Aplicación de regresión lineal para calcular la variable mgp en función de wt y disp
result<-boot(data=mtcars, statistic=rsq, R=1000, formula='mean')
rsq<-function(formula, data, indices){
d<-data[indices,] #allow boot to select sample.
fit<-str_replace(paste(formula, '(',d, ')', '" , '')
print(fit)
##return(summary(fit)$r.square)
}
rsq<-function(formula, data, indices){
d<-data[indices,] #allow boot to select sample.
fit<-str_replace(paste(formula, '(',d, ')', '"' , '')
print(fit)
##return(summary(fit)$r.square)
}
rsq<-function(formula, data, indices){
d<-data[indices,] #allow boot to select sample.
fit<-str_replace(paste(formula, '(',d, ')', '"' , ''))
print(fit)
##return(summary(fit)$r.square)
}
result<-boot(data=mtcars, statistic=rsq, R=1000, formula='mean')
?replace
rsq<-function(formula, data, indices){
d<-data[indices,] #allow boot to select sample.
fit<-replace(paste(formula, '(',d, ')', '"' , ''))
print(fit)
##return(summary(fit)$r.square)
}
result<-boot(data=mtcars, statistic=rsq, R=1000, formula='mean')
library(boot)
library(stringr)
library(boot)
library(stringr)
#Function to obtain R-Squared from the data.
rsq<-function(formula, data, indices){
d<-data[indices,] #allow boot to select sample.
fit<-str_replace(paste(formula, '(',d, ')', '"' , ''))
print(fit)
##return(summary(fit)$r.square)
}
result<-boot(data=mtcars, statistic=rsq, R=1000, formula='mean')
rsq<-function(formula, data, indices){
d<-data[indices,] #allow boot to select sample.
fit<-str_replace(paste(formula, '(',d, ')', ')'),'"', '')
print(fit)
##return(summary(fit)$r.square)
}
result<-boot(data=mtcars, statistic=rsq, R=1000, formula='mean')
rsq<-function(formula, data, indices){
d<-data[indices,] #allow boot to select sample.
fit<-str_replace(paste(formula, '(',d, ')'),'"', '')
print(fit)
##return(summary(fit)$r.square)
}
library(boot)
library(stringr)
rsq<-function(formula, data, indices){
d<-data[indices,] #allow boot to select sample.
fit<-str_replace(paste(formula, '(',d, ')'),'"', '')
print(fit)
##return(summary(fit)$r.square)
}
result<-boot(data=mtcars, statistic=rsq, R=1000, formula='mean')
library(boot)
library(stringr)
#Function to obtain R-Squared from the data.
rsq<-function(formula, data, indices){
d<-data[indices,] #allow boot to select sample.
fit<-str_replace(paste(formula, '(',d, ')'),'"', '')
print(fit)
##return(summary(fit)$r.square)
}
#bootstrapping with 1000 replications
##Aplicación de regresión lineal para calcular la variable mgp en función de wt y disp
result<-boot(data=mtcars, statistic=rsq, R=1000, formula='mean')
library(boot)
library(stringr)
#Function to obtain R-Squared from the data.
rsq<-function(formula, data, indices){
d<-data[indices,] #allow boot to select sample.
fit<-str_replace(paste(formula, '(',d, ')'),'"', '')
print(fit)
##return(summary(fit)$r.square)
}
##view results
summary(result)
result$t #Para ver lo R valores calculados
rsq<-function(formula, data, indices){
d<-data[indices,] #allow boot to select sample.
##form<-str_replace(paste(formula, '(',d, ')'),'"', '')
form<-paste(formula, '(',d, ')')
fit<- as.formula(form)
print(fit)
##return(summary(fit)$r.square)
}
result<-boot(data=mtcars, statistic=rsq, R=1000, formula='mean')
rsq<-function(formula, data, indices){
d<-data[indices,] #allow boot to select sample.
##form<-str_replace(paste(formula, '(',d, ')'),'"', '')
form<-paste(formula, '(',d, ')')
print(form)
fit<- as.formula(form)
print(fit)
##return(summary(fit)$r.square)
}
##Aplicación de regresión lineal para calcular la variable mgp en función de wt y disp
result<-boot(data=mtcars, statistic=rsq, R=1000, formula='mean')
library(PracSeriesTiempo)
Playing_with_your_data()
Playing_with_your_data
Playing_with_your_data
library(shiny)
library(shiny)
library(e1071)
library(corrplot)
library(shiny)
library(e1071)
library(corrplot)
library(PracSeriesTiempo)
Playing_with_your_data
detach("package:PracSeriesTiempo", unload=TRUE)
library(PracSeriesTiempo)
Playing_with_your_data()
Playing_with_your_data()
library(PracSeriesTiempo)
Playing_with_your_data()
library(corrplot)
library(e1071)
library(shiny)
Playing_with_your_data()
library(PracSeriesTiempo)
Playing_with_your_data()
alcohol<-c(8.99, 7.90, 1.03, 7,86, 10.41, 1.43, 1.92, 0.34, 11.93, 8.14, 3.77, 10.36, 3.11, 0.11, 5, 1.86, 5.52, 4.27, 4.77, 18.22)
plot(alcohol)
hist(alcohol)
alcohol<-c(8.99, 7.90, 1.03, 7.86, 10.41, 1.43, 1.92, 0.34,
11.93, 8.14, 3.77, 10.36, 3.11, 0.11, 5, 1.86,
5.52, 4.27, 4.77, 18.22)
hist(alcohol)
library(boot)
fun_mediana<-function(data, indices){
muestra=data[,indices]
medianan =median(muestra)
return medianan
}
fun_mediana<-function(data, indices){
muestra=data[,indices]
medianan =median(muestra)
return(medianan)
}
call_boots <- boot(data=alcohol,statisticfun_mediana)
summary(alcohol)
call_boots <- boot(data=alcohol,statisticfun_mediana, R=1000)
call_boots <- boot(data=alcohol,statistic=fun_mediana, R=1000)
fun_mediana<-function(data, indices){
muestra=d<-data[indices,]
medianan =median(muestra)
return(medianan)
}
call_boots <- boot(data=alcohol,statistic=fun_mediana, R=1000)
fun_mediana<-function(data, indices){
muestra=d<-data[indices]
medianan =median(muestra)
return(medianan)
}
call_boots <- boot(data=alcohol,statistic=fun_mediana, R=1000)
call_boots$t0
call_boots$t
summary(call_boots$t)
call_boots$t0
summary(call_boots$t)
call_boots$t
summary(call_boots$t)
hist(call_boots$t)
sd(call_boots$t)
sd(call_boots$t)
percentil25% <-quantile(call_boots$t, 0.25)
quantile(call_boots$t, 0.25)
percentil25 <-quantile(call_boots$t, 0.25)
percentil75 <-quantile(call_boots$t, 0.75)
percentil75 <-quantile(call_boots$t, 0.75)
percentil25
percentil75
percentil75 <-quantile(call_boots$t, 0.95)
percentil25
percentil75
percentil25 <-quantile(call_boots$t, 0.25)
percentil75 <-quantile(call_boots$t, 0.97)
percentil25
percentil75
percentil25 <-quantile(call_boots$t, 0.25)
percentil75 <-quantile(call_boots$t, 0.75)
percentil25
percentil75
percentil25 <-percenti(call_boots$t, 0.025)
percentil75 <-quantile(call_boots$t, 0.975)
percentil25 <-percenti(call_boots$t, 0.025)
percentil25 <-quantile(call_boots$t, 0.025)
percentil75 <-quantile(call_boots$t, 0.975)
percentil25
percentil75
boot.ci(call_boots, type="bca")
boot.ci(call_boots, type="basic")
boot.ci(call_boots)
Playing_with_your_data()
Playing_with_your_data()
library(shiny)
library(e1071)
library(shiny)
library(e1071)
library(corrplot)
library(PracSeriesTiempo)
Playing_with_your_data()
library(PracSeriesTiempo)
Playing_with_your_data()
library(PracSeriesTiempo)
Playing_with_your_data()
library(PracSeriesTiempo)
Playing_with_your_data()
library(PracSeriesTiempo)
library(boot)
Playing_with_your_data()
library(PracSeriesTiempo)
library(PracSeriesTiempo)
library(boot)
library(shiny)
library(e1071)
library(corrplot)
Playing_with_your_data()
library(PracSeriesTiempo)
library(PracSeriesTiempo)
library(boot)
library(shiny)
library(e1071)
library(corrplot)
Playing_with_your_data()
library(PracSeriesTiempo)
library(boot)
library(shiny)
library(e1071)
library(corrplot)
Playing_with_your_data()
library(PracSeriesTiempo)
library(boot)
library(shiny)
library(e1071)
library(corrplot)
Playing_with_your_data()
library(PracSeriesTiempo)
library(boot)
library(shiny)
library(e1071)
library(corrplot)
Playing_with_your_data()
library(PracSeriesTiempo)
library(boot)
library(shiny)
library(e1071)
library(corrplot)
Playing_with_your_data()
library(PracSeriesTiempo)
library(boot)
library(shiny)
library(e1071)
library(corrplot)
Playing_with_your_data()
library(PracSeriesTiempo)
library(boot)
library(shiny)
library(e1071)
library(corrplot)
Playing_with_your_data()
library(PracSeriesTiempo)
library(boot)
library(shiny)
library(e1071)
library(corrplot)
Playing_with_your_data()
library(PracSeriesTiempo)
library(boot)
library(shiny)
library(e1071)
library(corrplot)
Playing_with_your_data()
library(PracSeriesTiempo)
library(boot)
library(shiny)
library(e1071)
library(corrplot)
Playing_with_your_data()
