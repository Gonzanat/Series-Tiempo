df_arima
plot(df_arima)
##y la serie debería volverse a recrear, pero indicando el parámetro end
prediction<-forecast::forecast(forecast::auto.arima((df_arima), h=72))
plot(prediction)
library(forecast)
##Los datos de AIRPASA... van desde el años 1949 a 1960
##Entonces pongo como fin 1958, para predecir los últimos 2 años.
##La frequencia se asigna con base a como estén organizados los datos de la serie de tiempos:
##Si son mensuales (12), por quarter (4), Semestrales(2)
df_arima= ts(AirPassengers, frequency=12, start = c(1949, 1), end=c(1958,12))
df_arima
plot(df_arima)
##Predicción con modelo ARIMA y FORECAST:
##forecast::auto.arima(df_arima)
##Predicción de los 24 meses siguientes.
##Al momento de hacer la predicción, se debe solicitar al usuario cuántos periodos quiere predecir,
##en este caso, pedirle el parámetro "END".
##y la serie debería volverse a recrear, pero indicando el parámetro end
prediction<-forecast::forecast(forecast::auto.arima((df_arima), h=72))
plot(prediction)
##Otro ejemplo:
fit = arima(log(AirPassengers), c(0, 1, 1), seasonal = list(order = c(0, 1, 1), period = 12))
pred <- predict(fit, n.ahead = 10*12)
ts.plot(AirPassengers,exp(pred$pred), log = "y", lty = c(1,3))
prediction<-forecast::forecast(forecast::auto.arima(log(df_arima), h=72))
library(forecast)
##Los datos de AIRPASA... van desde el años 1949 a 1960
##Entonces pongo como fin 1958, para predecir los últimos 2 años.
##La frequencia se asigna con base a como estén organizados los datos de la serie de tiempos:
##Si son mensuales (12), por quarter (4), Semestrales(2)
df_arima= ts(AirPassengers, frequency=12, start = c(1949, 1), end=c(1958,12))
df_arima
##Predicción con modelo ARIMA y FORECAST:
##forecast::auto.arima(df_arima)
##Predicción de los 24 meses siguientes.
##Al momento de hacer la predicción, se debe solicitar al usuario cuántos periodos quiere predecir,
##en este caso, pedirle el parámetro "END".
##y la serie debería volverse a recrear, pero indicando el parámetro end
prediction<-forecast::forecast(forecast::auto.arima(log(df_arima), h=72))
plot(prediction)
fit = arima(log(AirPassengers), c(0, 1, 1), seasonal = list(order = c(0, 1, 1), period = 12))
pred <- predict(fit, n.ahead = 10*12)
ts.plot(AirPassengers,exp(pred$pred), log = "y", lty = c(1,3))
plot(AirPassengers)
T=100
y= rep(0, T)
a=13.9
b=0.11
s<-c(0.78, 1.63, -0.73, -1.53)
P<-4
sigma<-0.5
for(h in 1:T){
y[h]<-a + b * h   + s[h %% P +1]
}
plot(y, type='l')
y
cat(y, sep="\n")
fn<-function(param){
T <-100
a <-rep(0,T)
b <-rep(0,T)
s <-rep(0,T)
p <-rep(0,T)
s2<-rep(0,T)
alpha<-param[1]
beta<-param[2]
gamma<-param[3]
a[4]<- param[4]
a[4]<- param[5]
s[1]<- param[6]
s[2]<- param[7]
s[3]<- param[8]
s[4]<- param[9]
P[5]<-a[4] + b[4]+s[4]
e[5]<-y[5] - p[5]
e2[5]< e[5]^2
for(t in 5:T){
a[t]=alpha*(y[t]-s[t-4]) + (1-alpha)* (a[t-1] + b[t-1])
b[t]=beta*(a[t]-a[t-1]) + (1-beta) * b[t-1]
s[t]=gamma *(y[t]-a[t]) + (1-gamma) * (s[t-4])
p[t] <-a[t-1] + b[t-1] + s[t-1]
e[t] <- Y[t] - p[t]
e2[t] <- e[t]^2
}
sse<- sum(e2[5:T])
return (sse)
}
print(fn(param=rep(1,9)))
fn<-function(param){
T <-100
a <-rep(0,T)
b <-rep(0,T)
s <-rep(0,T)
p <-rep(0,T)
e <-rep(0,T)
s2<-rep(0,T)
alpha<-param[1]
beta<-param[2]
gamma<-param[3]
a[4]<- param[4]
a[4]<- param[5]
s[1]<- param[6]
s[2]<- param[7]
s[3]<- param[8]
s[4]<- param[9]
P[5]<-a[4] + b[4]+s[4]
e[5]<-y[5] - p[5]
e2[5]< e[5]^2
for(t in 5:T){
a[t]=alpha*(y[t]-s[t-4]) + (1-alpha)* (a[t-1] + b[t-1])
b[t]=beta*(a[t]-a[t-1]) + (1-beta) * b[t-1]
s[t]=gamma *(y[t]-a[t]) + (1-gamma) * (s[t-4])
p[t] <-a[t-1] + b[t-1] + s[t-1]
e[t] <- Y[t] - p[t]
e2[t] <- e[t]^2
}
sse<- sum(e2[5:T])
return (sse)
}
print(fn(param=rep(1,9)))
fn<-function(param){
T <-100
a <-rep(0,T)
b <-rep(0,T)
s <-rep(0,T)
p <-rep(0,T)
e <-rep(0,T)
s2<-rep(0,T)
e2<-rep(0,T)
alpha<-param[1]
beta<-param[2]
gamma<-param[3]
a[4]<- param[4]
a[4]<- param[5]
s[1]<- param[6]
s[2]<- param[7]
s[3]<- param[8]
s[4]<- param[9]
P[5]<-a[4] + b[4]+s[4]
e[5]<-y[5] - p[5]
e2[5]< e[5]^2
for(t in 5:T){
a[t]=alpha*(y[t]-s[t-4]) + (1-alpha)* (a[t-1] + b[t-1])
b[t]=beta*(a[t]-a[t-1]) + (1-beta) * b[t-1]
s[t]=gamma *(y[t]-a[t]) + (1-gamma) * (s[t-4])
p[t] <-a[t-1] + b[t-1] + s[t-1]
e[t] <- Y[t] - p[t]
e2[t] <- e[t]^2
}
sse<- sum(e2[5:T])
return (sse)
}
print(fn(param=rep(1,9)))
fn<-function(param){
T <-100
a <-rep(0,T)
b <-rep(0,T)
s <-rep(0,T)
p <-rep(0,T)
e <-rep(0,T)
s2<-rep(0,T)
e2<-rep(0,T)
alpha<-param[1]
beta<-param[2]
gamma<-param[3]
a[4]<- param[4]
a[4]<- param[5]
s[1]<- param[6]
s[2]<- param[7]
s[3]<- param[8]
s[4]<- param[9]
P[5]<-a[4] + b[4]+s[4]
e[5]<-y[5] - p[5]
e2[5]< e[5]^2
for(t in 5:T){
a[t]=alpha*(y[t]-s[t-4]) + (1-alpha)* (a[t-1] + b[t-1])
b[t]=beta*(a[t]-a[t-1]) + (1-beta) * b[t-1]
s[t]=gamma *(y[t]-a[t]) + (1-gamma) * (s[t-4])
p[t] <-a[t-1] + b[t-1] + s[t-1]
e[t] <- y[t] - p[t]
e2[t] <- e[t]^2
}
sse<- sum(e2[5:T])
return (sse)
}
print(fn(param=rep(1,9)))
print(fn(param=rep(1,9)))
optim(par=rep(2,9), fn=fn)
library(PracSeriesTiempo)
shiny::runApp('R')
##METODO ARIMA:
library(forecast)
datos <- read.csv("gas.csv", header=T, dec=".",sep="\t")
fit= Arima(datos, order = c(1,1,1))
fit
accuracy(fit)
demand<-ts(BJsales, start=c(2000,1), frequency=12)
plot(demand)
hw<-HoltWinters(demand)
plot(hw, add=T)
datos <- read.csv("gas.csv", header=T, dec=".",sep="\t")
serie<-ts(datos, start=c(2000,1), frequency=12)
datos <- read.csv("gas.csv", header=T, dec=".",sep="\t")
serie<-ts(datos, start=c(2000,1), frequency=12)
plot(serie)
plot(fit, add=T)
plot(serie)
fit= Arima(datos, order = c(1,1,1))
plot(fit, add=T)
plot(fit)
Arima.fit= Arima(datos, order = c(1,1,1))
Arima.fit= Arima(serie, order = c(1,1,1))
plot(fit)
Arima.fit= Arima(serie, order = c(1,1,1))
plot(Arima.fit)
Arima.fit= Arima(serie, order = c(1,1,1))
Arima.fit
plot(Arima.fit)
future = forecast(fit,h=12)
plot(future, add=T)
plot(serie)
plot(future, add=T)
demand<-ts(BJsales, start=c(2000,1), frequency=12)
plot(demand)
hw<-HoltWinters(demand)
plot(hw, add=T)
Arima.fit= Arima(demand, order = c(1,1,1))
plot(Arima.fit)
Arima.fit= Arima(demand, order = c(1,1,1))
plot(demand)
hw<-HoltWinters(demand)
plot(hw, add=T)
plot(hw)
plot(demand)
plot(hw)
tsdiag(fit)
plot(hw)
forecast <- predict(hw, n.ahead = 12, prediction.interval = T, level = 0.95)
plot(hw, forecast)
Arima= Arima(serie, order = c(1,1,1))
Arima= Arima(demand, order = c(1,1,1))
plot(demand)
Arima= Arima(demand, order = c(1,1,1))
plot(Arima)
forecast<- = predict(Arima, n.ahead = 12, prediction.interval = T, level = 0.95)
forecast<- =predict(Arima, n.ahead = 12, prediction.interval = T, level = 0.95)
forecast<- predict(Arima, n.ahead = 12, prediction.interval = T, level = 0.95)
plot(hw, forecast)
forecast<- predict(Arima, n.ahead = 12, prediction.interval = T, level = 0.95)
plot(Arima, forecast)
demand<-ts(BJsales, start=c(2000,1), frequency=12)
plot(demand)
hw<-HoltWinters(demand)
plot(hw)
forecast <- predict(hw, n.ahead = 12, prediction.interval = T, level = 0.95)
plot(hw, forecast)
forecast
demand<-ts(BJsales, start=c(2000,1), frequency=12)
plot(demand)
Arima= Arima(demand, order = c(1,1,1))
Arima
forecast<- predict(Arima, n.ahead = 12, prediction.interval = T, level = 0.95)
forecast
plot(forecast)
forecast
plot(forecast$pred)
Arima$fitted
plot(Arima$fitted)
plot(Arima)
plot(Arima$fitted)
plot(Arima$fitted, forecast$pred)
plot(Arima$fitted)
demand<-ts(BJsales, start=c(2000,1), frequency=12)
plot(demand)
plot(Arima$fitted, add=T)
plot(Arima$fitted)
plot(demand)
plot(Arima$fitted)
plot(forecast)
forecast<- predict(Arima, n.ahead = 12, prediction.interval = T, level = 0.95)
forecast
plot(forecast$se)
plot(forecast$pred)
plot(hw, forecast)
demand<-ts(BJsales, start=c(2000,1), frequency=12)
plot(demand)
hw<-HoltWinters(demand)
plot(hw)
##Predicción
forecast <- predict(hw, n.ahead = 12, prediction.interval = T, level = 0.95)
plot(hw, forecast)
demand<-ts(BJsales, start=c(2000,1), frequency=12)
plot(demand)
Arima= Arima(demand, order = c(1,1,1))
plot(Arima)
accuracy(fit)
tsdiag(fit)
##Predicción
forecast<- forecast(fit,h=12)
plot(fforecast)
forecast<- forecast(fit,h=12)
plot(forecast)
plot(demand)
Arima= Arima(demand, order = c(1,1,1))
plot(Arima)
forecast<- forecast(Arima,h=12)
plot(forecast)
plot(demand)
plot(forecast)
forecast<- forecast(Arima,h=24)
plot(forecast)
library(PracSeriesTiempo)
runApp('R')
library(PracSeriesTiempo)
runApp('R')
demand<-ts(BJsales, start=c(2000,1), frequency=12)
Arima= Arima(demand, order = c(1,1,1))
plot(Arima$x,col="red")
plot(forecast)
plot(Arima$x,col="red")
lines(fitted(fit),col="blue")
lines(fitted(Arima),col="blue")
lines(fitted(Arima, h=24),col="blue")
plot(Arima$x,col="red")
lines(fitted(Arima, h=24),col="blue")
lines(fitted(Arima),col="blue")
plot(Arima$x,col="red")
lines(fitted(Arima),col="blue")
lines(forecast, col="green")
plot(Arima$x,col="red")
lines(fitted(Arima),col="blue")
lines(forecast, col="green")
demand<-ts(BJsales, start=c(2000,1), frequency=12)
plot(demand)
hw<-HoltWinters(demand)
plot(hw)
##Predicción
forecast <- predict(hw, n.ahead = 12, prediction.interval = T, level = 0.95)
plot(demand, hw, forecast)
plot(demand)
plot(hw)
plot(demand, hw, forecast)
plot(hw, forecast)
plot(Arima$x,col="red")
lines(fitted(Arima),col="blue")
plot(Arima$x,col="red", demand)
hw<-HoltWinters(demand)
plot(hw)
demand<-ts(BJsales, start=c(2000,1), frequency=12)
Arima= Arima(demand, order = c(1,1,1))
plot(Arima)
plot(Arima$fitted)
plot(demand, Arima$fitted)
plot(demand)
plot(Arima$fitted)
plot(Arima$fitted)
lines(demand)
plot(Arima$fitted)
lines(demand,col='red')
plot(forecast)
plot(Arima$fitted)
forecast<- forecast(Arima,h=24)
plot(forecast)
forecast<- forecast(Arima,h=12)
plot(forecast)
forecast<- forecast(Arima,h=12)
plot(Arima$fitted)
lines(demand,col='red')
lines(forecast)
Arima= Arima(demand, order = c(1,1,1))
forecast<- forecast(Arima,h=12)
plot(Arima$fitted)
lines(demand,col='red')
plot(forecast)
plot(Arima$fitted)
plot(forecast)
lines(demand,col='red')
lines(Arima$fitted)
plot(demand)
plot(forecast)
lines(demand,col='red')
lines(Arima$fitted)
plot(demand)
plot(forecast)
lines(demand)
lines(Arima$fitted, 'red')
plot(forecast)
lines(demand)
lines(Arima$fitted, 'red')
lines(Arima$fitted, 'red')
plot(demand)
plot(forecast)
lines(demand)
lines(Arima$fitted, col='red')
plot(demand)
plot(Arima$fitted)
plot(forecast)
##lines(demand)
lines(Arima$fitted, col='red')
plot(demand)
plot(forecast)
lines(Arima$fitted, col='red')
demand<-ts(BJsales, start=c(2000,1), frequency=12)
plot(demand)
plot(hw)
plot(hw, forecast)
forecast <- predict(hw, n.ahead = 12, prediction.interval = T, level = 0.95)
plot(hw, forecast)
demand<-ts(BJsales, start=c(2000,1), frequency=12)
plot(demand)
Arima= Arima(demand, order = c(1,1,1))
forecast<- forecast(Arima,h=12)
plot(forecast)
lines(Arima$fitted, col='red')
plot(forecast, col='blue')
lines(Arima$fitted)
demand<-ts(BJsales, start=c(2000,1), frequency=12)
plot(demand)
hw<-HoltWinters(demand)
plot(hw)
forecast <- predict(hw, n.ahead = 12, prediction.interval = T, level = 0.95)
plot(hw, forecast)
library(PracSeriesTiempo)
runApp('R')
runApp('R')
library(PracSeriesTiempo)
runApp('R')
library(PracSeriesTiempo)
runApp('R')
demand<-ts(BJsales, start=c(2000,1), frequency=12)
plot(demand)
hw<-HoltWinters(demand)
plot(hw)
accuracy(hw)
accuracy(hw)
demand<-ts(BJsales, start=c(2000,1), frequency=12)
plot(demand)
hw<-HoltWinters(demand)
plot(hw)
accuracy(hw)
hw
hw
runApp('R')
demand<-ts(BJsales, start=c(2000,1), frequency=12)
plot(demand)
demand<-ts(BJsales, start=c(2000,1), frequency=12)
plot(demand)
cionalidad:
demand.diff<diff(demand)
demand.diff<diff(demand)
demand.diff<-diff(demand)
plot(demand.diff)
acf(demand.diff)
pacf(demand.diff)
plot(demand.diff)
acf(demand.diff)
pacf(demand.diff)
datos <- read.csv("gas.csv", header=T, dec=".",sep="\t")
demand<-ts(BJsales, start=c(2000,1), frequency=12)
plot(demand)
##La diferencio para quitarle la tendencia
demand.diff<-diff(demand)
plot(demand.diff)
acf(demand.diff)
pacf(demand.diff)
demand.diff<-diff(demand)
plot(demand.diff)
acf(demand.diff)
pacf(demand.diff)
runApp('R')
library(PracSeriesTiempo)
runApp('R')
library(PracSeriesTiempo)
runApp('R')
library(PracSeriesTiempo)
runApp('R')
library(PracSeriesTiempo)
library(PracSeriesTiempo)
runApp('R')
Playing_with_your_data()
library(boot)
library(shiny)
library(e1071)
library(corrplot)
Playing_with_your_data()
library(boot)
library(shiny)
library(e1071)
library(corrplot)
library(PracSeriesTiempo)
Playing_with_your_data()
library(PracSeriesTiempo)
Playing_with_your_data()
library(PracSeriesTiempo)
library(forecast)
library(PracSeriesTiempo)
library(forecast)
Playing_with_your_data()
library(PracSeriesTiempo)
library(PracSeriesTiempo)
Playing_with_your_data()
library(PracSeriesTiempo)
Playing_with_your_data()
Playing_with_your_data()
library(shiny)
Playing_with_your_data()
library('shiny')
library(PracSeriesTiempo)
Playing_with_your_data()
library(PracSeriesTiempo)
Playing_with_your_data()
